{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Sathi Ko Recipe - Simple Recipe Website\n\n## Overview\n\nSathi Ko Recipe is a full-stack recipe website designed for international students and cooking beginners. The application provides simple, affordable, and healthy meal recipes with features like search, filtering, and detailed recipe instructions. Built as a modern web application with a focus on mobile-first design and user-friendly navigation.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with TypeScript using Vite as the build tool\n- **UI Library**: Shadcn/ui components built on Radix UI primitives\n- **Styling**: Tailwind CSS with CSS variables for theming\n- **Routing**: Wouter for lightweight client-side routing\n- **State Management**: TanStack Query (React Query) for server state management\n- **Form Handling**: React Hook Form with Zod schema validation\n\n### Backend Architecture\n- **Server**: Express.js with TypeScript\n- **API Design**: RESTful endpoints for recipe and contact management\n- **Data Storage**: In-memory storage (MemStorage class) for development with interface for future database integration\n- **Database Schema**: Drizzle ORM schemas defined for PostgreSQL (prepared for future migration)\n- **Validation**: Zod schemas shared between frontend and backend\n\n### Key Features\n- **Recipe Management**: CRUD operations for recipes with search and filtering capabilities\n- **Contact System**: Contact form with server-side validation and storage\n- **Theme Support**: Light/dark mode toggle with persistent storage\n- **Responsive Design**: Mobile-first approach with responsive components\n- **Error Handling**: Custom error boundaries and toast notifications\n\n### Data Models\n- **Recipe Schema**: Comprehensive recipe structure including ingredients, instructions, nutrition facts, cooking tips, ratings, and categorization\n- **Contact Schema**: Simple contact form structure with name, email, reason, and message fields\n\n### Development Tools\n- **Type Safety**: Full TypeScript implementation across frontend and backend\n- **Code Quality**: ESLint configuration and TypeScript strict mode\n- **Build Process**: Vite for frontend bundling, ESBuild for server compilation\n- **Development Server**: Hot module replacement and error overlay for development\n\n## External Dependencies\n\n### Core Libraries\n- **@neondatabase/serverless**: PostgreSQL database connectivity (prepared for production)\n- **drizzle-orm** & **drizzle-kit**: Type-safe database ORM and migration tools\n- **@tanstack/react-query**: Server state management and caching\n- **wouter**: Lightweight React router\n- **react-hook-form** & **@hookform/resolvers**: Form management with validation\n\n### UI Components\n- **@radix-ui/***: Comprehensive set of accessible UI primitives\n- **tailwindcss**: Utility-first CSS framework\n- **class-variance-authority**: Component variant management\n- **lucide-react**: Icon library\n\n### Development Dependencies\n- **vite**: Frontend build tool and development server\n- **typescript**: Type checking and compilation\n- **@replit/vite-plugin-runtime-error-modal**: Development error handling\n- **@replit/vite-plugin-cartographer**: Development tooling for Replit environment\n\n### Validation and Utilities\n- **zod**: Schema validation shared between client and server\n- **drizzle-zod**: Integration between Drizzle schemas and Zod validation\n- **date-fns**: Date manipulation utilities\n- **clsx** & **tailwind-merge**: Conditional CSS class management","size_bytes":3537},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n        'yellow-star': \"var(--yellow-star)\",\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2800},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertContactSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  \n  // Recipe routes\n  app.get(\"/api/recipes\", async (req, res) => {\n    try {\n      const { category, search } = req.query;\n      \n      let recipes;\n      if (search) {\n        recipes = await storage.searchRecipes(search as string);\n      } else if (category) {\n        recipes = await storage.getRecipesByCategory(category as string);\n      } else {\n        recipes = await storage.getAllRecipes();\n      }\n      \n      res.json(recipes);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch recipes\" });\n    }\n  });\n\n  app.get(\"/api/recipes/trending\", async (req, res) => {\n    try {\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : 4;\n      const recipes = await storage.getTrendingRecipes(limit);\n      res.json(recipes);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch trending recipes\" });\n    }\n  });\n\n  app.get(\"/api/recipes/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const recipe = await storage.getRecipeById(id);\n      \n      if (!recipe) {\n        return res.status(404).json({ message: \"Recipe not found\" });\n      }\n      \n      res.json(recipe);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch recipe\" });\n    }\n  });\n\n  // Contact form route\n  app.post(\"/api/contact\", async (req, res) => {\n    try {\n      const validatedData = insertContactSchema.parse(req.body);\n      const contact = await storage.createContact(validatedData);\n      res.status(201).json({ message: \"Message sent successfully\", contact });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ \n          message: \"Invalid form data\", \n          errors: error.errors \n        });\n      }\n      res.status(500).json({ message: \"Failed to send message\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":2189},"server/storage.ts":{"content":"import { type Recipe, type InsertRecipe, type Contact, type InsertContact } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // Recipe methods\n  getAllRecipes(): Promise<Recipe[]>;\n  getRecipeById(id: string): Promise<Recipe | undefined>;\n  getRecipesByCategory(category: string): Promise<Recipe[]>;\n  searchRecipes(query: string): Promise<Recipe[]>;\n  getTrendingRecipes(limit?: number): Promise<Recipe[]>;\n  createRecipe(recipe: InsertRecipe): Promise<Recipe>;\n  \n  // Contact methods\n  createContact(contact: InsertContact): Promise<Contact>;\n}\n\nexport class MemStorage implements IStorage {\n  private recipes: Map<string, Recipe>;\n  private contacts: Map<string, Contact>;\n\n  constructor() {\n    this.recipes = new Map();\n    this.contacts = new Map();\n    this.seedRecipes();\n  }\n\n  private seedRecipes() {\n    const sampleRecipes: Recipe[] = [\n      {\n        id: \"2\",\n        title: \"Sishne Jhol\",\n        description: \"Nutritious soup made from stinging nettle leaves, rich in minerals and perfect for detox.\",\n        image: \"/images/recipes/sishne-jhol.png\",\n        cookTime: 20,\n        servings: 2,\n        cost: 2.50,\n        difficulty: \"Easy\",\n        category: \"Vegetarian\",\n        rating: 4.6,\n        ratingCount: 38,\n        ingredients: [\n          \"2 cups fresh stinging nettle leaves\",\n          \"3 cups water\",\n          \"1 medium onion, chopped\",\n          \"2 cloves garlic, minced\",\n          \"1 tsp ginger, minced\",\n          \"1/2 tsp turmeric powder\",\n          \"1 tsp cumin powder\",\n          \"Salt to taste\",\n          \"2 tbsp oil\",\n          \"Fresh cilantro for garnish\"\n        ],\n        instructions: [\n          \"Wash the nettle leaves thoroughly wearing gloves to avoid stings.\",\n          \"Heat oil in a pot over medium heat. Add onion and sauté until golden.\",\n          \"Add garlic and ginger, cook for 1 minute until fragrant.\",\n          \"Add turmeric and cumin powder, stir for 30 seconds.\",\n          \"Add nettle leaves and water, bring to a boil.\",\n          \"Reduce heat and simmer for 15 minutes until leaves are tender.\",\n          \"Season with salt and garnish with fresh cilantro before serving.\"\n        ],\n        nutritionFacts: {\n          calories: 45,\n          protein: 4,\n          carbs: 8,\n          fat: 2\n        },\n        cookingTips: [\n          \"Always use gloves when handling fresh nettle leaves\",\n          \"Cooking removes the stinging property\",\n          \"Rich in iron, calcium, and vitamins\"\n        ],\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      {\n        id: \"3\",\n        title: \"Phando\",\n        description: \"A tangy soup using fermented leafy greens, a traditional village delicacy perfect for digestion.\",\n        image: \"/images/recipes/phando.png\",\n        cookTime: 25,\n        servings: 3,\n        cost: 2.50,\n        difficulty: \"Medium\",\n        category: \"Vegetarian\",\n        rating: 3.8,\n        ratingCount: 19,\n        ingredients: [\n          \"2 cups fermented leafy greens (gundruk)\",\n          \"3 cups water\",\n          \"1 medium onion, sliced\",\n          \"2 cloves garlic, minced\",\n          \"1 tsp ginger, minced\",\n          \"1/2 tsp turmeric powder\",\n          \"1 tsp cumin seeds\",\n          \"2 dried red chilies\",\n          \"Salt to taste\",\n          \"2 tbsp oil\"\n        ],\n        instructions: [\n          \"Rinse the fermented greens thoroughly and chop them finely.\",\n          \"Heat oil in a pot and add cumin seeds and dried chilies.\",\n          \"Add onions and cook until translucent.\",\n          \"Add garlic, ginger, and turmeric. Cook for a minute.\",\n          \"Add the fermented greens and water, bring to a boil.\",\n          \"Simmer for 15-20 minutes until greens are tender.\",\n          \"Season with salt and serve hot with rice.\"\n        ],\n        nutritionFacts: {\n          calories: 150,\n          protein: 6,\n          carbs: 15,\n          fat: 8\n        },\n        cookingTips: [\n          \"Fermented greens can be found in Asian grocery stores\",\n          \"Adjust water quantity for desired consistency\",\n          \"This soup aids digestion and is very nutritious\"\n        ],\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      {\n        id: \"4\",\n        title: \"Chukar-Khanda\",\n        description: \"A sour and spicy pickle made from hog plums and local spices, perfect as a tangy appetizer.\",\n        image: \"/images/recipes/chukar-khanda.png\",\n        cookTime: 15,\n        servings: 4,\n        cost: 2.00,\n        difficulty: \"Easy\",\n        category: \"Vegetarian\",\n        rating: 3.6,\n        ratingCount: 25,\n        ingredients: [\n          \"2 cups hog plums (lapsi), chopped\",\n          \"2 tbsp mustard oil\",\n          \"1 tsp mustard seeds\",\n          \"1 tsp fenugreek seeds\",\n          \"3-4 dried red chilies\",\n          \"1 tsp turmeric powder\",\n          \"2 tsp red chili powder\",\n          \"Salt to taste\",\n          \"1 tbsp garlic, minced\"\n        ],\n        instructions: [\n          \"Heat mustard oil in a pan until it smokes, then reduce heat.\",\n          \"Add mustard seeds and fenugreek seeds, let them splutter.\",\n          \"Add dried red chilies and garlic, fry for 30 seconds.\",\n          \"Add chopped hog plums and mix well.\",\n          \"Add turmeric, chili powder, and salt. Mix thoroughly.\",\n          \"Cook for 10-12 minutes, stirring occasionally until fruits soften.\",\n          \"Let it cool and store in an airtight container.\"\n        ],\n        nutritionFacts: {\n          calories: 85,\n          protein: 2,\n          carbs: 12,\n          fat: 4\n        },\n        cookingTips: [\n          \"Use ripe but firm hog plums for best texture\",\n          \"Can be stored for up to 2 weeks in refrigerator\",\n          \"Great accompaniment to dal-bhat\"\n        ],\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      {\n        id: \"5\",\n        title: \"Karesa Bari\",\n        description: \"A bitter gourd mash with mustard oil and chili, served as a flavorful side dish.\",\n        image: \"/images/recipes/karesa-bari.png\",\n        cookTime: 20,\n        servings: 4,\n        cost: 2.50,\n        difficulty: \"Easy\",\n        category: \"Vegetarian\",\n        rating: 3.8,\n        ratingCount: 32,\n        ingredients: [\n          \"2 large bitter gourds, sliced\",\n          \"3 tbsp mustard oil\",\n          \"1 tsp mustard seeds\",\n          \"2-3 green chilies, chopped\",\n          \"1 tsp turmeric powder\",\n          \"1 tsp red chili powder\",\n          \"Salt to taste\",\n          \"1 tbsp garlic, minced\",\n          \"Fresh cilantro for garnish\"\n        ],\n        instructions: [\n          \"Slice bitter gourds and sprinkle salt, let sit for 10 minutes to reduce bitterness.\",\n          \"Rinse and pat dry the bitter gourd slices.\",\n          \"Heat mustard oil in a pan, add mustard seeds.\",\n          \"Add garlic and green chilies, fry for 30 seconds.\",\n          \"Add bitter gourd slices and cook for 10 minutes.\",\n          \"Add turmeric, chili powder, and salt. Mix well.\",\n          \"Mash slightly and cook for 5 more minutes.\",\n          \"Garnish with cilantro and serve hot.\"\n        ],\n        nutritionFacts: {\n          calories: 120,\n          protein: 3,\n          carbs: 8,\n          fat: 9\n        },\n        cookingTips: [\n          \"Salting helps reduce the bitterness\",\n          \"Don't over-mash, keep some texture\",\n          \"Great for diabetics as bitter gourd helps control blood sugar\"\n        ],\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      {\n        id: \"6\",\n        title: \"Chukauni\",\n        description: \"Creamy yogurt and potato salad mixed with turmeric and mustard, a cooling side dish.\",\n        image: \"/images/recipes/chukauni.png\",\n        cookTime: 15,\n        servings: 4,\n        cost: 2.50,\n        difficulty: \"Easy\",\n        category: \"Vegetarian\",\n        rating: 4.5,\n        ratingCount: 45,\n        ingredients: [\n          \"3 medium potatoes, boiled and cubed\",\n          \"1 cup thick yogurt\",\n          \"1 tbsp mustard oil\",\n          \"1/2 tsp mustard seeds\",\n          \"1/2 tsp turmeric powder\",\n          \"1 tsp black mustard paste\",\n          \"Salt to taste\",\n          \"2 green chilies, finely chopped\",\n          \"Fresh cilantro for garnish\"\n        ],\n        instructions: [\n          \"Boil potatoes until tender, peel and cube them.\",\n          \"In a bowl, whisk yogurt until smooth.\",\n          \"Heat mustard oil, add mustard seeds and let them splutter.\",\n          \"Add turmeric and pour over yogurt. Mix well.\",\n          \"Add mustard paste, salt, and green chilies to yogurt.\",\n          \"Gently fold in the cubed potatoes.\",\n          \"Chill for 30 minutes before serving.\",\n          \"Garnish with cilantro and serve cold.\"\n        ],\n        nutritionFacts: {\n          calories: 180,\n          protein: 6,\n          carbs: 25,\n          fat: 7\n        },\n        cookingTips: [\n          \"Use day-old boiled potatoes for better texture\",\n          \"Adjust mustard paste according to taste preference\",\n          \"Serve chilled for best flavor\"\n        ],\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      {\n        id: \"7\",\n        title: \"Sekuwa\",\n        description: \"Grilled meat cubes marinated in traditional Nepali herbs and spices, perfect for barbecue.\",\n        image: \"/images/recipes/sekuwa.png\",\n        cookTime: 45,\n        servings: 4,\n        cost: 8.50,\n        difficulty: \"Medium\",\n        category: \"Non-Veg\",\n        rating: 4.9,\n        ratingCount: 89,\n        ingredients: [\n          \"1 kg goat meat or chicken, cut into cubes\",\n          \"3 tbsp mustard oil\",\n          \"2 tbsp ginger-garlic paste\",\n          \"1 tsp turmeric powder\",\n          \"2 tsp red chili powder\",\n          \"1 tsp cumin powder\",\n          \"1 tsp coriander powder\",\n          \"2 tsp sekuwa masala\",\n          \"Salt to taste\",\n          \"2 tbsp yogurt\",\n          \"Lemon wedges for serving\"\n        ],\n        instructions: [\n          \"Cut meat into 2-inch cubes and clean thoroughly.\",\n          \"In a bowl, mix all spices with yogurt and mustard oil.\",\n          \"Marinate meat cubes in this mixture for at least 2 hours.\",\n          \"Thread marinated meat onto skewers.\",\n          \"Grill over charcoal or in oven at 200°C for 20-25 minutes.\",\n          \"Turn occasionally and brush with remaining marinade.\",\n          \"Cook until meat is tender and slightly charred.\",\n          \"Serve hot with lemon wedges and beaten rice.\"\n        ],\n        nutritionFacts: {\n          calories: 320,\n          protein: 28,\n          carbs: 4,\n          fat: 22\n        },\n        cookingTips: [\n          \"Marinate overnight for deeper flavor\",\n          \"Don't overcrowd skewers for even cooking\",\n          \"Traditionally cooked over charcoal for smoky flavor\"\n        ],\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      {\n        id: \"8\",\n        title: \"Taruwa\",\n        description: \"Seasonal vegetables deep-fried in chickpea or rice flour batter, crispy and delicious.\",\n        image: \"/images/recipes/taruwa.png\",\n        cookTime: 30,\n        servings: 4,\n        cost: 3.50,\n        difficulty: \"Easy\",\n        category: \"Vegetarian\",\n        rating: 3.9,\n        ratingCount: 56,\n        ingredients: [\n          \"2 cups mixed vegetables (eggplant, potato, cauliflower)\",\n          \"1 cup chickpea flour (besan)\",\n          \"2 tbsp rice flour\",\n          \"1 tsp turmeric powder\",\n          \"1 tsp red chili powder\",\n          \"1/2 tsp carom seeds (ajwain)\",\n          \"Salt to taste\",\n          \"Water as needed\",\n          \"Oil for deep frying\"\n        ],\n        instructions: [\n          \"Cut vegetables into medium-sized pieces.\",\n          \"In a bowl, mix chickpea flour, rice flour, and all spices.\",\n          \"Add water gradually to make a thick batter.\",\n          \"The batter should coat vegetables well but not be too runny.\",\n          \"Heat oil in a deep pan to 180°C.\",\n          \"Dip vegetables in batter and deep fry until golden brown.\",\n          \"Fry in small batches to maintain oil temperature.\",\n          \"Drain on paper towels and serve hot with chutney.\"\n        ],\n        nutritionFacts: {\n          calories: 280,\n          protein: 8,\n          carbs: 35,\n          fat: 12\n        },\n        cookingTips: [\n          \"Ensure vegetables are dry before dipping in batter\",\n          \"Don't overcrowd the pan while frying\",\n          \"Best enjoyed immediately while crispy\"\n        ],\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      {\n        id: \"11\",\n        title: \"Chhoyela\",\n        description: \"Smoked and spiced meat (buffalo or chicken), served cold as a traditional Newari delicacy.\",\n        image: \"/images/recipes/chhoyela.png\",\n        cookTime: 60,\n        servings: 6,\n        cost: 9.50,\n        difficulty: \"Hard\",\n        category: \"Non-Veg\",\n        rating: 4.2,\n        ratingCount: 78,\n        ingredients: [\n          \"1 kg buffalo meat or chicken breast\",\n          \"3 tbsp mustard oil\",\n          \"2 tbsp ginger-garlic paste\",\n          \"2 tsp red chili powder\",\n          \"1 tsp turmeric powder\",\n          \"2 tsp fenugreek powder\",\n          \"1 tbsp timur (Sichuan pepper), ground\",\n          \"Salt to taste\",\n          \"2 tbsp chopped green onions\",\n          \"1 tbsp chopped cilantro\"\n        ],\n        instructions: [\n          \"Boil meat with salt and turmeric until fully cooked.\",\n          \"Remove from water and let it cool completely.\",\n          \"Shred the meat into small pieces using hands.\",\n          \"Heat mustard oil until it smokes, then let it cool.\",\n          \"Mix shredded meat with all spices and cooled mustard oil.\",\n          \"Add ginger-garlic paste and mix thoroughly.\",\n          \"Let it marinate for at least 30 minutes.\",\n          \"Garnish with green onions and cilantro before serving.\",\n          \"Serve cold with beaten rice and achar.\"\n        ],\n        nutritionFacts: {\n          calories: 290,\n          protein: 32,\n          carbs: 3,\n          fat: 16\n        },\n        cookingTips: [\n          \"Traditionally smoked over hay for authentic flavor\",\n          \"Can be stored in refrigerator for 2-3 days\",\n          \"Timur (Sichuan pepper) is essential for authentic taste\"\n        ],\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      {\n        id: \"12\",\n        title: \"Saanbheko\",\n        description: \"A tender meat dish made by pressure-cooking with robust spices, rich and flavorful.\",\n        image: \"/images/recipes/saanbheko.png\",\n        cookTime: 90,\n        servings: 6,\n        cost: 10.50,\n        difficulty: \"Medium\",\n        category: \"Non-Veg\",\n        rating: 3.8,\n        ratingCount: 65,\n        ingredients: [\n          \"1 kg goat meat with bones\",\n          \"3 tbsp mustard oil\",\n          \"2 large onions, sliced\",\n          \"3 tbsp ginger-garlic paste\",\n          \"2 tsp turmeric powder\",\n          \"3 tsp red chili powder\",\n          \"2 tsp coriander powder\",\n          \"1 tsp garam masala\",\n          \"3 tomatoes, chopped\",\n          \"Salt to taste\",\n          \"Fresh cilantro for garnish\"\n        ],\n        instructions: [\n          \"Clean and cut meat into medium pieces.\",\n          \"Heat mustard oil in pressure cooker and fry onions until golden.\",\n          \"Add ginger-garlic paste and fry for 2 minutes.\",\n          \"Add all spices and fry for 30 seconds.\",\n          \"Add tomatoes and cook until they break down.\",\n          \"Add meat pieces and mix well with spices.\",\n          \"Add salt and 1 cup water.\",\n          \"Pressure cook for 6-7 whistles or until meat is tender.\",\n          \"Garnish with cilantro and serve hot with rice.\"\n        ],\n        nutritionFacts: {\n          calories: 380,\n          protein: 35,\n          carbs: 8,\n          fat: 24\n        },\n        cookingTips: [\n          \"Don't add too much water as meat releases its own juices\",\n          \"Adjust spices according to taste preference\",\n          \"Tastes better the next day as flavors develop\"\n        ],\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      {\n        id: \"13\",\n        title: \"Momo\",\n        description: \"Steamed dumplings filled with meat or vegetables, served with spicy dipping sauce.\",\n        image: \"/images/recipes/momo.png\",\n        cookTime: 60,\n        servings: 4,\n        cost: 6.50,\n        difficulty: \"Medium\",\n        category: \"Non-Veg\",\n        rating: 4.8,\n        ratingCount: 234,\n        ingredients: [\n          \"2 cups all-purpose flour\",\n          \"500g ground chicken or pork\",\n          \"1 large onion, finely chopped\",\n          \"3 cloves garlic, minced\",\n          \"1 tbsp ginger, minced\",\n          \"2 green chilies, finely chopped\",\n          \"1 tsp soy sauce\",\n          \"1 tbsp vegetable oil\",\n          \"Salt and pepper to taste\",\n          \"Water for dough\",\n          \"Chopped cilantro and green onions\"\n        ],\n        instructions: [\n          \"Make dough with flour and water, knead until smooth. Rest for 30 minutes.\",\n          \"Mix ground meat with onions, garlic, ginger, chilies, soy sauce, oil, salt, and pepper.\",\n          \"Add chopped cilantro and green onions to the filling.\",\n          \"Roll dough into small circles (3-4 inches diameter).\",\n          \"Place 1 tbsp filling in center of each circle.\",\n          \"Fold and pleat edges to seal dumplings.\",\n          \"Steam in a steamer for 15-20 minutes.\",\n          \"Serve hot with spicy tomato chutney.\"\n        ],\n        nutritionFacts: {\n          calories: 320,\n          protein: 18,\n          carbs: 35,\n          fat: 12\n        },\n        cookingTips: [\n          \"Don't overfill dumplings or they may burst\",\n          \"Keep unused dough covered to prevent drying\",\n          \"Can be pan-fried after steaming for crispy bottom\"\n        ],\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      {\n        id: \"14\",\n        title: \"Dal Bhat\",\n        description: \"Classic Nepali staple: lentil soup with steamed rice and traditional sides, the heart of Nepali cuisine.\",\n        image: \"/images/recipes/dal-bhat.png\",\n        cookTime: 45,\n        servings: 4,\n        cost: 3.50,\n        difficulty: \"Easy\",\n        category: \"Vegetarian\",\n        rating: 4.5,\n        ratingCount: 156,\n        ingredients: [\n          \"1 cup yellow lentils (masoor dal)\",\n          \"2 cups basmati rice\",\n          \"1 medium onion, chopped\",\n          \"3 cloves garlic, minced\",\n          \"1 tsp ginger, minced\",\n          \"2 tomatoes, chopped\",\n          \"1 tsp turmeric powder\",\n          \"1 tsp cumin seeds\",\n          \"2 tbsp ghee or oil\",\n          \"Salt to taste\",\n          \"Fresh cilantro for garnish\",\n          \"Green chilies\"\n        ],\n        instructions: [\n          \"Wash and cook rice in a rice cooker or pot until fluffy.\",\n          \"Wash lentils and cook with turmeric and salt until soft.\",\n          \"Heat ghee in a pan, add cumin seeds and let them splutter.\",\n          \"Add onions and cook until golden brown.\",\n          \"Add garlic, ginger, and green chilies. Cook for 1 minute.\",\n          \"Add tomatoes and cook until they break down.\",\n          \"Add this tempering to cooked lentils and simmer for 10 minutes.\",\n          \"Adjust consistency with water if needed.\",\n          \"Garnish with cilantro and serve with rice and vegetables.\"\n        ],\n        nutritionFacts: {\n          calories: 380,\n          protein: 16,\n          carbs: 68,\n          fat: 8\n        },\n        cookingTips: [\n          \"Soak lentils for 30 minutes for faster cooking\",\n          \"Traditionally served with pickles and vegetables\",\n          \"Comfort food that's nutritionally complete\"\n        ],\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      {\n        id: \"15\",\n        title: \"Yomari\",\n        description: \"Sweet steamed dumpling filled with jaggery and sesame paste, made during Yomari Punhi festival.\",\n        image: \"/images/recipes/yomari.png\",\n        cookTime: 60,\n        servings: 8,\n        cost: 4.50,\n        difficulty: \"Medium\",\n        category: \"Vegetarian\",\n        rating: 4.3,\n        ratingCount: 89,\n        ingredients: [\n          \"2 cups rice flour\",\n          \"1 cup jaggery, grated\",\n          \"1/2 cup sesame seeds\",\n          \"1/4 cup grated coconut\",\n          \"1 tsp cardamom powder\",\n          \"Warm water for dough\",\n          \"Pinch of salt\",\n          \"1 tbsp ghee\"\n        ],\n        instructions: [\n          \"Dry roast sesame seeds until golden, then grind coarsely.\",\n          \"Mix jaggery, ground sesame, coconut, and cardamom for filling.\",\n          \"Make dough with rice flour, warm water, and salt. Knead until smooth.\",\n          \"Rest dough for 15 minutes covered with damp cloth.\",\n          \"Take small portions of dough and shape into cups.\",\n          \"Fill with jaggery mixture and seal by bringing edges together.\",\n          \"Shape into traditional conch shell form.\",\n          \"Steam for 20-25 minutes until cooked through.\",\n          \"Brush with ghee and serve warm.\"\n        ],\n        nutritionFacts: {\n          calories: 220,\n          protein: 4,\n          carbs: 45,\n          fat: 6\n        },\n        cookingTips: [\n          \"Dough should be pliable but not sticky\",\n          \"Traditional shape resembles a conch shell\",\n          \"Often made during Yomari Punhi festival in December\"\n        ],\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      {\n        id: \"16\",\n        title: \"Sikarni\",\n        description: \"Thickened curd dessert flavored with cardamom, nuts, and saffron, a royal Nepali sweet.\",\n        image: \"/images/recipes/sikarni.png\",\n        cookTime: 30,\n        servings: 4,\n        cost: 3.50,\n        difficulty: \"Easy\",\n        category: \"Vegetarian\",\n        rating: 4.1,\n        ratingCount: 67,\n        ingredients: [\n          \"2 cups thick yogurt\",\n          \"1/2 cup condensed milk\",\n          \"1/4 cup powdered sugar\",\n          \"1/2 tsp cardamom powder\",\n          \"2 tbsp chopped almonds\",\n          \"2 tbsp chopped pistachios\",\n          \"Few saffron strands\",\n          \"1 tbsp warm milk\"\n        ],\n        instructions: [\n          \"Hang yogurt in a muslin cloth for 2 hours to remove excess whey.\",\n          \"Soak saffron in warm milk for 10 minutes.\",\n          \"In a bowl, whisk the thick yogurt until smooth.\",\n          \"Add condensed milk and powdered sugar, mix well.\",\n          \"Add cardamom powder and saffron milk.\",\n          \"Mix in half of the chopped nuts.\",\n          \"Chill in refrigerator for at least 2 hours.\",\n          \"Garnish with remaining nuts and serve cold.\"\n        ],\n        nutritionFacts: {\n          calories: 220,\n          protein: 8,\n          carbs: 28,\n          fat: 9\n        },\n        cookingTips: [\n          \"Use hung curd for thick consistency\",\n          \"Adjust sweetness according to taste\",\n          \"Best served chilled on festive occasions\"\n        ],\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      {\n        id: \"17\",\n        title: \"Dahi Phal\",\n        description: \"A fresh mix of fruits and yogurt, lightly sweetened and perfect for hot summer days.\",\n        image: \"/images/recipes/dahi-phal.png\",\n        cookTime: 10,\n        servings: 2,\n        cost: 4.00,\n        difficulty: \"Easy\",\n        category: \"Vegetarian\",\n        rating: 4.8,\n        ratingCount: 56,\n        ingredients: [\n          \"1 cup thick yogurt\",\n          \"1 apple, diced\",\n          \"1 banana, sliced\",\n          \"1/2 cup grapes, halved\",\n          \"1/4 cup pomegranate seeds\",\n          \"2 tbsp honey\",\n          \"1/4 tsp black salt\",\n          \"1/4 tsp chaat masala\",\n          \"Fresh mint leaves for garnish\"\n        ],\n        instructions: [\n          \"In a large bowl, whisk the yogurt until smooth.\",\n          \"Add honey, black salt, and chaat masala to the yogurt.\",\n          \"Gently fold in all the prepared fruits.\",\n          \"Mix well ensuring fruits are well coated with yogurt.\",\n          \"Chill in refrigerator for 30 minutes before serving.\",\n          \"Garnish with fresh mint leaves and serve cold.\"\n        ],\n        nutritionFacts: {\n          calories: 160,\n          protein: 6,\n          carbs: 32,\n          fat: 3\n        },\n        cookingTips: [\n          \"Use seasonal fruits for best flavor\",\n          \"Drain yogurt if too watery\",\n          \"Serve immediately after adding fruits to prevent sogginess\"\n        ],\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      {\n        id: \"18\",\n        title: \"Kheer\",\n        description: \"Creamy rice pudding made with milk, rice, sugar, and cardamom, a beloved dessert across Nepal.\",\n        image: \"/images/recipes/kheer.png\",\n        cookTime: 45,\n        servings: 6,\n        cost: 4.50,\n        difficulty: \"Medium\",\n        category: \"Vegetarian\",\n        rating: 4.7,\n        ratingCount: 67,\n        ingredients: [\n          \"1/2 cup basmati rice\",\n          \"4 cups whole milk\",\n          \"1/2 cup sugar\",\n          \"1/4 tsp cardamom powder\",\n          \"2 tbsp almonds, sliced\",\n          \"2 tbsp pistachios, chopped\",\n          \"1 tbsp raisins\",\n          \"1 tbsp ghee\"\n        ],\n        instructions: [\n          \"Wash and soak rice for 30 minutes, then drain.\",\n          \"Heat ghee in a heavy-bottomed pan and lightly fry the rice.\",\n          \"Add milk and bring to a boil, then simmer on low heat.\",\n          \"Stir frequently and cook for 30-35 minutes until rice is completely soft.\",\n          \"Add sugar and cardamom powder, cook for 5 more minutes.\",\n          \"Add half of the nuts and all raisins, mix well.\",\n          \"Serve hot or chilled, garnished with remaining nuts.\"\n        ],\n        nutritionFacts: {\n          calories: 250,\n          protein: 8,\n          carbs: 38,\n          fat: 8\n        },\n        cookingTips: [\n          \"Constant stirring prevents the milk from burning\",\n          \"Can be made ahead and refrigerated for up to 3 days\",\n          \"Consistency should be creamy, not too thick\"\n        ],\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      {\n        id: \"20\",\n        title: \"Lasune Golbhenda\",\n        description: \"Tomato-based chutney enhanced with lots of garlic, a staple sauce in Nepali cuisine.\",\n        image: \"/images/recipes/lasune-golbhenda.png\",\n        cookTime: 25,\n        servings: 3,\n        cost: 2.50,\n        difficulty: \"Easy\",\n        category: \"Vegetarian\",\n        rating: 4.1,\n        ratingCount: 29,\n        ingredients: [\n          \"6 medium tomatoes, quartered\",\n          \"8 cloves garlic, crushed\",\n          \"2 tbsp mustard oil\",\n          \"1/2 tsp turmeric powder\",\n          \"1 tsp red chili powder\",\n          \"1 tsp coriander powder\",\n          \"Salt to taste\",\n          \"1 tsp sugar\",\n          \"Fresh cilantro for garnish\"\n        ],\n        instructions: [\n          \"Heat mustard oil in a pan until it smokes slightly, then reduce heat.\",\n          \"Add crushed garlic and fry until golden brown.\",\n          \"Add tomatoes and mix well with the garlic.\",\n          \"Add all spices, salt, and sugar. Mix thoroughly.\",\n          \"Cover and cook on medium heat for 15-20 minutes, stirring occasionally.\",\n          \"Mash lightly with a spoon to break down tomatoes.\",\n          \"Garnish with cilantro and serve hot with rice.\"\n        ],\n        nutritionFacts: {\n          calories: 120,\n          protein: 3,\n          carbs: 12,\n          fat: 7\n        },\n        cookingTips: [\n          \"Use ripe tomatoes for best flavor\",\n          \"Mustard oil adds authentic taste but can be substituted\",\n          \"Don't over-mash, keep some tomato chunks for texture\"\n        ],\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      {\n        id: \"21\",\n        title: \"Dhaniya Sada\",\n        description: \"Simple and fresh coriander chutney with lemon and chili, perfect accompaniment to any meal.\",\n        image: \"/images/recipes/dhaniya-sada.png\",\n        cookTime: 10,\n        servings: 4,\n        cost: 1.50,\n        difficulty: \"Easy\",\n        category: \"Vegetarian\",\n        rating: 4.3,\n        ratingCount: 78,\n        ingredients: [\n          \"2 cups fresh cilantro leaves\",\n          \"3-4 green chilies\",\n          \"3 cloves garlic\",\n          \"1 inch ginger\",\n          \"2 tbsp lemon juice\",\n          \"1/2 tsp salt\",\n          \"1 tsp sugar\",\n          \"2-3 tbsp water\"\n        ],\n        instructions: [\n          \"Wash cilantro leaves thoroughly and drain well.\",\n          \"In a food processor, grind green chilies, garlic, and ginger first.\",\n          \"Add cilantro leaves and grind to a smooth paste.\",\n          \"Add lemon juice, salt, and sugar.\",\n          \"Add water gradually to achieve desired consistency.\",\n          \"Taste and adjust seasoning as needed.\",\n          \"Serve fresh as a side with meals.\"\n        ],\n        nutritionFacts: {\n          calories: 25,\n          protein: 1,\n          carbs: 5,\n          fat: 0\n        },\n        cookingTips: [\n          \"Use fresh cilantro for best flavor\",\n          \"Don't add too much water at once\",\n          \"Store in refrigerator for up to 3 days\"\n        ],\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      {\n        id: \"22\",\n        title: \"Tilko Chhop\",\n        description: \"Thick sesame seed paste used as dip or side condiment, rich in nutrients and flavor.\",\n        image: \"/images/recipes/tilko-chhop.png\",\n        cookTime: 20,\n        servings: 6,\n        cost: 3.00,\n        difficulty: \"Easy\",\n        category: \"Vegetarian\",\n        rating: 4.0,\n        ratingCount: 34,\n        ingredients: [\n          \"1 cup sesame seeds\",\n          \"2-3 green chilies\",\n          \"3 cloves garlic\",\n          \"1 inch ginger\",\n          \"1 tsp salt\",\n          \"1 tbsp mustard oil\",\n          \"1 tsp lemon juice\"\n        ],\n        instructions: [\n          \"Dry roast sesame seeds in a pan until golden and aromatic.\",\n          \"Let them cool completely.\",\n          \"In a food processor, grind roasted sesame seeds to a fine powder.\",\n          \"Add green chilies, garlic, and ginger. Grind to a paste.\",\n          \"Add salt, mustard oil, and lemon juice.\",\n          \"Mix well to form a thick paste.\",\n          \"Store in an airtight container in refrigerator.\",\n          \"Serve as a dip with vegetables or meat.\"\n        ],\n        nutritionFacts: {\n          calories: 180,\n          protein: 6,\n          carbs: 6,\n          fat: 16\n        },\n        cookingTips: [\n          \"Roast sesame seeds on low heat to prevent burning\",\n          \"Adjust consistency with oil if too thick\",\n          \"Rich source of calcium and healthy fats\"\n        ],\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      {\n        id: \"23\",\n        title: \"Sathi ko Mixed Thali\",\n        description: \"A complete Nepali meal with chicken, goat curry, dal, vegetables, rice, and traditional sides.\",\n        image: \"/images/recipes/sathi-ko-mixed-thali.png\",\n        cookTime: 120,\n        servings: 2,\n        cost: 12.50,\n        difficulty: \"Hard\",\n        category: \"Non-Veg\",\n        rating: 4.9,\n        ratingCount: 145,\n        ingredients: [\n          \"1/2 kg chicken, cut into pieces\",\n          \"1/2 kg goat meat\",\n          \"1 cup lentils (dal)\",\n          \"2 cups basmati rice\",\n          \"Mixed vegetables (potato, cauliflower, beans)\",\n          \"Tomato chutney ingredients\",\n          \"Pickled vegetables\",\n          \"1 sweet (kheer or sikarni)\",\n          \"Spices for each curry\",\n          \"Ghee and oil\"\n        ],\n        instructions: [\n          \"Prepare dal bhat by cooking rice and lentils separately.\",\n          \"Cook chicken curry with traditional spices and onion-tomato base.\",\n          \"Prepare goat curry with pressure cooking and aromatic spices.\",\n          \"Make mixed vegetable curry with seasonal vegetables.\",\n          \"Prepare tomato chutney with garlic and spices.\",\n          \"Cook rice until fluffy and aromatic.\",\n          \"Arrange all items on a traditional thali plate.\",\n          \"Serve hot with pickles and sweet dessert.\"\n        ],\n        nutritionFacts: {\n          calories: 850,\n          protein: 45,\n          carbs: 78,\n          fat: 35\n        },\n        cookingTips: [\n          \"Plan ahead as this meal takes time to prepare\",\n          \"Each component should complement the others\",\n          \"Traditional way of eating complete Nepali meal\"\n        ],\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      {\n        id: \"1\",\n        title: \"Quanti\",\n        description: \"A hearty soup made from a mix of sprouted legumes, perfect for international students and cooking beginners.\",\n        image: \"/images/recipes/quanti.png\",\n        cookTime: 45,\n        servings: 4,\n        cost: 3.50,\n        difficulty: \"Easy\",\n        category: \"Vegetarian\",\n        rating: 4.0,\n        ratingCount: 25,\n        ingredients: [\n          \"1/2 cup mixed sprouted beans (black gram, kidney beans, chickpeas)\",\n          \"3 cups water\",\n          \"1 large onion, chopped\",\n          \"3 cloves garlic, minced\",\n          \"1 inch ginger, minced\",\n          \"2 tomatoes, chopped\",\n          \"1 tsp turmeric powder\",\n          \"1 tsp cumin powder\",\n          \"1 tsp coriander powder\",\n          \"Salt to taste\",\n          \"3 tbsp oil\",\n          \"Fresh herbs for garnish\"\n        ],\n        instructions: [\n          \"Heat oil in a large pot over medium heat.\",\n          \"Add onions and cook until golden brown, about 5-7 minutes.\",\n          \"Add garlic and ginger, cook for another minute.\",\n          \"Add tomatoes and spices, cook until tomatoes break down.\",\n          \"Add sprouted beans and water, bring to a boil.\",\n          \"Reduce heat and simmer for 30-35 minutes until beans are tender.\",\n          \"Season with salt and garnish with fresh herbs.\"\n        ],\n        nutritionFacts: {\n          calories: 220,\n          protein: 14,\n          carbs: 28,\n          fat: 8\n        },\n        cookingTips: [\n          \"Use a pressure cooker to reduce cooking time by half\",\n          \"Mix different types of beans for varied texture and nutrition\",\n          \"Can be made ahead and tastes even better the next day\"\n        ],\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      {\n        id: \"3\",\n        title: \"Sikarni\",\n        description: \"Traditional Nepali sweet dessert made with thick milk, cardamom powder, and assorted nuts. Perfect for festivals and special occasions.\",\n        image: \"/images/recipes/sikarni-royal.png\",\n        cookTime: 15,\n        servings: 4,\n        cost: 3.50,\n        difficulty: \"Easy\",\n        category: \"Vegetarian\",\n        rating: 4.2,\n        ratingCount: 42,\n        ingredients: [\n          \"2 cups whole milk\",\n          \"1/2 cup heavy cream\",\n          \"1/4 cup sugar\",\n          \"1/2 tsp cardamom powder\",\n          \"2 tbsp mixed nuts (chopped)\",\n          \"1 tbsp pistachios\"\n        ],\n        instructions: [\n          \"Heat the milk in a heavy-bottomed pan over medium heat. Bring it to a boil and let it simmer for 10-15 minutes until it reduces slightly.\",\n          \"Add sugar and cardamom powder to the milk. Stir well and let it cook for another 5 minutes until the sugar completely dissolves.\",\n          \"Remove from heat and let it cool to room temperature. Then refrigerate for at least 2 hours until chilled.\",\n          \"Before serving, whip the heavy cream until soft peaks form. Gently fold it into the chilled milk mixture.\",\n          \"Serve in individual bowls and garnish with chopped nuts and pistachios. Enjoy this traditional Nepali dessert chilled!\"\n        ],\n        nutritionFacts: {\n          calories: 220,\n          protein: 8,\n          carbs: 18,\n          fat: 12\n        },\n        cookingTips: [\n          \"Use full-fat milk for the creamiest texture\",\n          \"Don't skip the chilling time - it's essential for the right consistency\",\n          \"You can substitute heavy cream with condensed milk for a sweeter version\",\n          \"Toast the nuts lightly before adding for extra flavor\"\n        ],\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      {\n        id: \"4\",\n        title: \"Phando\",\n        description: \"A tangy soup using fermented leafy greens, a traditional Nepali comfort food perfect for digestion.\",\n        image: \"/images/recipes/phando-generated.png\",\n        cookTime: 25,\n        servings: 3,\n        cost: 2.50,\n        difficulty: \"Medium\",\n        category: \"Vegetarian\",\n        rating: 4.3,\n        ratingCount: 19,\n        ingredients: [\n          \"2 cups fermented leafy greens (gundruk)\",\n          \"3 cups water\",\n          \"1 medium onion, sliced\",\n          \"2 cloves garlic, minced\",\n          \"1 tsp ginger, minced\",\n          \"1/2 tsp turmeric powder\",\n          \"1 tsp cumin seeds\",\n          \"2 dried red chilies\",\n          \"Salt to taste\",\n          \"2 tbsp oil\"\n        ],\n        instructions: [\n          \"Rinse the fermented greens thoroughly and chop them finely.\",\n          \"Heat oil in a pot and add cumin seeds and dried chilies.\",\n          \"Add onions and cook until translucent.\",\n          \"Add garlic, ginger, and turmeric. Cook for a minute.\",\n          \"Add the fermented greens and water, bring to a boil.\",\n          \"Simmer for 15-20 minutes until greens are tender.\",\n          \"Season with salt and serve hot with rice.\"\n        ],\n        nutritionFacts: {\n          calories: 150,\n          protein: 6,\n          carbs: 15,\n          fat: 8\n        },\n        cookingTips: [\n          \"Fermented greens can be found in Asian grocery stores\",\n          \"Adjust water quantity for desired consistency\",\n          \"This soup aids digestion and is very nutritious\"\n        ],\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      {\n        id: \"5\",\n        title: \"Badame Dhaniya\",\n        description: \"Nutty green chutney made from roasted peanuts and fresh cilantro, perfect as a side dish.\",\n        image: \"/images/recipes/badame-dhaniya-unique.png\",\n        cookTime: 15,\n        servings: 4,\n        cost: 2.00,\n        difficulty: \"Easy\",\n        category: \"Vegetarian\",\n        rating: 4.5,\n        ratingCount: 33,\n        ingredients: [\n          \"1 cup roasted peanuts\",\n          \"2 cups fresh cilantro leaves\",\n          \"2-3 green chilies\",\n          \"3 cloves garlic\",\n          \"1 inch ginger\",\n          \"1 tsp cumin seeds\",\n          \"Salt to taste\",\n          \"2 tbsp lemon juice\",\n          \"2-3 tbsp water\"\n        ],\n        instructions: [\n          \"Dry roast peanuts in a pan until lightly golden. Let cool.\",\n          \"In a food processor, grind cumin seeds first until powdered.\",\n          \"Add peanuts and grind to a coarse powder.\",\n          \"Add cilantro, green chilies, garlic, and ginger.\",\n          \"Add salt, lemon juice, and water as needed to make a smooth paste.\",\n          \"Taste and adjust seasoning. Serve as a side dish or spread.\"\n        ],\n        nutritionFacts: {\n          calories: 180,\n          protein: 8,\n          carbs: 6,\n          fat: 15\n        },\n        cookingTips: [\n          \"Store in refrigerator for up to a week\",\n          \"Can be used as a sandwich spread or dip\",\n          \"Adjust chilies according to spice preference\"\n        ],\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      {\n        id: \"6\",\n        title: \"Dahi Phal\",\n        description: \"Refreshing yogurt fruit salad perfect for hot days, a healthy and cooling dessert.\",\n        image: \"/images/recipes/dahi-phal-generated.png\",\n        cookTime: 10,\n        servings: 2,\n        cost: 4.00,\n        difficulty: \"Easy\",\n        category: \"Vegetarian\",\n        rating: 4.8,\n        ratingCount: 56,\n        ingredients: [\n          \"1 cup thick yogurt\",\n          \"1 apple, diced\",\n          \"1 banana, sliced\",\n          \"1/2 cup grapes, halved\",\n          \"1/4 cup pomegranate seeds\",\n          \"2 tbsp honey\",\n          \"1/4 tsp black salt\",\n          \"1/4 tsp chaat masala\",\n          \"Fresh mint leaves for garnish\"\n        ],\n        instructions: [\n          \"In a large bowl, whisk the yogurt until smooth.\",\n          \"Add honey, black salt, and chaat masala to the yogurt.\",\n          \"Gently fold in all the prepared fruits.\",\n          \"Mix well ensuring fruits are well coated with yogurt.\",\n          \"Chill in refrigerator for 30 minutes before serving.\",\n          \"Garnish with fresh mint leaves and serve cold.\"\n        ],\n        nutritionFacts: {\n          calories: 160,\n          protein: 6,\n          carbs: 32,\n          fat: 3\n        },\n        cookingTips: [\n          \"Use seasonal fruits for best flavor\",\n          \"Drain yogurt if too watery\",\n          \"Serve immediately after adding fruits to prevent sogginess\"\n        ],\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      {\n        id: \"7\",\n        title: \"Lasune Golbhenda\",\n        description: \"Spicy tomato and garlic curry, a Nepali comfort food that pairs perfectly with rice.\",\n        image: \"/images/recipes/lasune-golbhenda-generated.png\",\n        cookTime: 25,\n        servings: 3,\n        cost: 2.50,\n        difficulty: \"Easy\",\n        category: \"Vegetarian\",\n        rating: 4.1,\n        ratingCount: 29,\n        ingredients: [\n          \"6 medium tomatoes, quartered\",\n          \"8 cloves garlic, crushed\",\n          \"2 tbsp mustard oil\",\n          \"1/2 tsp turmeric powder\",\n          \"1 tsp red chili powder\",\n          \"1 tsp coriander powder\",\n          \"Salt to taste\",\n          \"1 tsp sugar\",\n          \"Fresh cilantro for garnish\"\n        ],\n        instructions: [\n          \"Heat mustard oil in a pan until it smokes slightly, then reduce heat.\",\n          \"Add crushed garlic and fry until golden brown.\",\n          \"Add tomatoes and mix well with the garlic.\",\n          \"Add all spices, salt, and sugar. Mix thoroughly.\",\n          \"Cover and cook on medium heat for 15-20 minutes, stirring occasionally.\",\n          \"Mash lightly with a spoon to break down tomatoes.\",\n          \"Garnish with cilantro and serve hot with rice.\"\n        ],\n        nutritionFacts: {\n          calories: 120,\n          protein: 3,\n          carbs: 12,\n          fat: 7\n        },\n        cookingTips: [\n          \"Use ripe tomatoes for best flavor\",\n          \"Mustard oil adds authentic taste but can be substituted\",\n          \"Don't over-mash, keep some tomato chunks for texture\"\n        ],\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      {\n        id: \"8\",\n        title: \"Kheer\",\n        description: \"Creamy rice pudding with nuts and aromatic spices, a beloved dessert across Nepal.\",\n        image: \"/images/recipes/kheer-generated.png\",\n        cookTime: 45,\n        servings: 6,\n        cost: 4.50,\n        difficulty: \"Medium\",\n        category: \"Vegetarian\",\n        rating: 4.7,\n        ratingCount: 67,\n        ingredients: [\n          \"1/2 cup basmati rice\",\n          \"4 cups whole milk\",\n          \"1/2 cup sugar\",\n          \"1/4 tsp cardamom powder\",\n          \"2 tbsp almonds, sliced\",\n          \"2 tbsp pistachios, chopped\",\n          \"1 tbsp raisins\",\n          \"1 tbsp ghee\"\n        ],\n        instructions: [\n          \"Wash and soak rice for 30 minutes, then drain.\",\n          \"Heat ghee in a heavy-bottomed pan and lightly fry the rice.\",\n          \"Add milk and bring to a boil, then simmer on low heat.\",\n          \"Stir frequently and cook for 30-35 minutes until rice is completely soft.\",\n          \"Add sugar and cardamom powder, cook for 5 more minutes.\",\n          \"Add half of the nuts and all raisins, mix well.\",\n          \"Serve hot or chilled, garnished with remaining nuts.\"\n        ],\n        nutritionFacts: {\n          calories: 250,\n          protein: 8,\n          carbs: 38,\n          fat: 8\n        },\n        cookingTips: [\n          \"Constant stirring prevents the milk from burning\",\n          \"Can be made ahead and refrigerated for up to 3 days\",\n          \"Consistency should be creamy, not too thick\"\n        ],\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      // Add the new recipes from the provided images\n      {\n        id: \"30\",\n        title: \"Dhania Sada\",\n        description: \"A vibrant green cilantro chutney packed with fresh herbs, garlic, and spices - perfect as a condiment.\",\n        image: \"/images/recipes/dhania-sada-variation.png\",\n        cookTime: 10,\n        servings: 4,\n        cost: 1.50,\n        difficulty: \"Easy\",\n        category: \"Vegetarian\",\n        rating: 4.5,\n        ratingCount: 42,\n        ingredients: [\n          \"2 cups fresh cilantro leaves\",\n          \"4 cloves garlic\",\n          \"2 green chilies\",\n          \"1 inch piece ginger\",\n          \"2 tbsp roasted sesame seeds\",\n          \"1 tsp cumin powder\",\n          \"Salt to taste\",\n          \"2 tbsp mustard oil\",\n          \"1 tsp lemon juice\"\n        ],\n        instructions: [\n          \"Wash and roughly chop cilantro leaves, discarding thick stems.\",\n          \"In a blender, combine cilantro, garlic, green chilies, and ginger.\",\n          \"Add sesame seeds, cumin powder, and salt.\",\n          \"Blend with minimal water to make a smooth paste.\",\n          \"Add mustard oil and lemon juice, blend for 30 seconds.\",\n          \"Taste and adjust salt and spices as needed.\",\n          \"Store in refrigerator for up to a week.\"\n        ],\n        nutritionFacts: {\n          calories: 35,\n          protein: 2,\n          carbs: 4,\n          fat: 3\n        },\n        cookingTips: [\n          \"Use fresh cilantro for best flavor\",\n          \"Mustard oil gives authentic taste but can substitute with olive oil\",\n          \"Add a pinch of sugar if too spicy\"\n        ],\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      {\n        id: \"31\",\n        title: \"Tilko Chhop\", \n        description: \"A traditional sesame seed paste with spices, rich in flavor and nutrients, often served with rice or roti.\",\n        image: \"/images/recipes/tilko-chhop-variation.png\",\n        cookTime: 15,\n        servings: 4,\n        cost: 2.00,\n        difficulty: \"Medium\",\n        category: \"Vegetarian\", \n        rating: 4.3,\n        ratingCount: 28,\n        ingredients: [\n          \"1 cup sesame seeds\",\n          \"3 cloves garlic\",\n          \"2 dried red chilies\",\n          \"1 tsp ginger, minced\",\n          \"1/2 tsp turmeric powder\",\n          \"1 tsp cumin seeds\",\n          \"Salt to taste\",\n          \"2 tbsp mustard oil\",\n          \"1 tbsp lemon juice\"\n        ],\n        instructions: [\n          \"Dry roast sesame seeds in a pan until golden and fragrant.\",\n          \"Let cool completely and grind to a fine paste.\",\n          \"Heat oil in a pan, add cumin seeds and dried chilies.\",\n          \"Add garlic and ginger, sauté until fragrant.\",\n          \"Add turmeric and the sesame paste.\",\n          \"Mix well, add salt and cook for 2-3 minutes.\",\n          \"Add lemon juice and serve warm or at room temperature.\"\n        ],\n        nutritionFacts: {\n          calories: 180,\n          protein: 6,\n          carbs: 8,\n          fat: 15\n        },\n        cookingTips: [\n          \"Roast sesame seeds on medium heat to prevent burning\",\n          \"Can be stored for up to 2 weeks in refrigerator\",\n          \"Consistency should be like thick paste\"\n        ],\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      {\n        id: \"32\",\n        title: \"Badame Dhaniya\",\n        description: \"A delicious almond and cilantro chutney with aromatic spices, perfect as a side dish or condiment.\",\n        image: \"/images/recipes/badame-dhaniya-unique.png\",\n        cookTime: 12,\n        servings: 4,\n        cost: 3.00,\n        difficulty: \"Easy\",\n        category: \"Vegetarian\",\n        rating: 4.4,\n        ratingCount: 35,\n        ingredients: [\n          \"1/2 cup almonds, soaked\",\n          \"1 cup fresh cilantro\",\n          \"3 cloves garlic\",\n          \"2 green chilies\",\n          \"1 inch ginger piece\",\n          \"1 tsp cumin seeds\",\n          \"Salt to taste\",\n          \"2 tbsp olive oil\",\n          \"1 tbsp lime juice\"\n        ],\n        instructions: [\n          \"Soak almonds in warm water for 30 minutes, then peel.\",\n          \"Wash cilantro leaves thoroughly and drain.\",\n          \"In a blender, combine almonds, cilantro, garlic, chilies, and ginger.\",\n          \"Add cumin seeds and salt.\",\n          \"Blend with minimal water to make a smooth paste.\",\n          \"Add olive oil and lime juice, blend until well combined.\",\n          \"Serve fresh or store refrigerated for up to 5 days.\"\n        ],\n        nutritionFacts: {\n          calories: 95,\n          protein: 4,\n          carbs: 6,\n          fat: 8\n        },\n        cookingTips: [\n          \"Soaking almonds makes them easier to blend\",\n          \"Can add mint leaves for extra freshness\",\n          \"Adjust consistency with water as needed\"\n        ],\n        createdAt: new Date(),\n        updatedAt: new Date()\n      }\n    ];\n\n    sampleRecipes.forEach(recipe => {\n      this.recipes.set(recipe.id, recipe);\n    });\n  }\n\n  async getAllRecipes(): Promise<Recipe[]> {\n    return Array.from(this.recipes.values()).sort((a, b) => \n      new Date(b.createdAt!).getTime() - new Date(a.createdAt!).getTime()\n    );\n  }\n\n  async getRecipeById(id: string): Promise<Recipe | undefined> {\n    return this.recipes.get(id);\n  }\n\n  async getRecipesByCategory(category: string): Promise<Recipe[]> {\n    if (category === \"All Recipes\") {\n      return this.getAllRecipes();\n    }\n    \n    const allRecipes = Array.from(this.recipes.values());\n    \n    switch (category) {\n      case \"Vegetarian\":\n        return allRecipes.filter(recipe => recipe.category === \"Vegetarian\");\n      case \"Non-Veg\":\n        return allRecipes.filter(recipe => recipe.category === \"Non-Veg\");\n      case \"Quick Meals\":\n        return allRecipes.filter(recipe => recipe.cookTime <= 30);\n      case \"Budget\":\n        return allRecipes.filter(recipe => recipe.cost <= 3.50);\n      default:\n        return allRecipes.filter(recipe => recipe.category === category);\n    }\n  }\n\n  async searchRecipes(query: string): Promise<Recipe[]> {\n    const searchTerm = query.toLowerCase();\n    return Array.from(this.recipes.values()).filter(recipe =>\n      recipe.title.toLowerCase().includes(searchTerm) ||\n      recipe.description.toLowerCase().includes(searchTerm) ||\n      (recipe.ingredients as string[]).some((ingredient: string) => \n        ingredient.toLowerCase().includes(searchTerm)\n      )\n    );\n  }\n\n  async getTrendingRecipes(limit: number = 4): Promise<Recipe[]> {\n    return Array.from(this.recipes.values())\n      .sort((a, b) => (b.rating * b.ratingCount) - (a.rating * a.ratingCount))\n      .slice(0, limit);\n  }\n\n  async createRecipe(insertRecipe: InsertRecipe): Promise<Recipe> {\n    const id = randomUUID();\n    const recipe: Recipe = {\n      ...insertRecipe,\n      id,\n      rating: 0,\n      ratingCount: 0,\n      nutritionFacts: insertRecipe.nutritionFacts || null,\n      cookingTips: insertRecipe.cookingTips || null,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.recipes.set(id, recipe);\n    return recipe;\n  }\n\n  async createContact(insertContact: InsertContact): Promise<Contact> {\n    const id = randomUUID();\n    const contact: Contact = {\n      ...insertContact,\n      id,\n      createdAt: new Date(),\n    };\n    this.contacts.set(id, contact);\n    return contact;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":51665},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, real, boolean, timestamp, json } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema, createSelectSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const recipes = pgTable(\"recipes\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  image: text(\"image\").notNull(),\n  cookTime: integer(\"cook_time\").notNull(), // in minutes\n  servings: integer(\"servings\").notNull(),\n  cost: real(\"cost\").notNull(), // cost per serving in dollars\n  difficulty: text(\"difficulty\").notNull(), // Easy, Medium, Hard\n  category: text(\"category\").notNull(), // Vegetarian, Non-Veg, Quick Meals, Budget, Trending\n  rating: real(\"rating\").notNull().default(0),\n  ratingCount: integer(\"rating_count\").notNull().default(0),\n  ingredients: json(\"ingredients\").$type<string[]>().notNull(),\n  instructions: json(\"instructions\").$type<string[]>().notNull(),\n  nutritionFacts: json(\"nutrition_facts\").$type<{\n    calories: number;\n    protein: number;\n    carbs: number;\n    fat: number;\n  }>(),\n  cookingTips: json(\"cooking_tips\").$type<string[]>(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const contacts = pgTable(\"contacts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull(),\n  reason: text(\"reason\").notNull(),\n  message: text(\"message\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const insertRecipeSchema = createInsertSchema(recipes).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  rating: true,\n  ratingCount: true,\n});\n\nexport const insertContactSchema = createInsertSchema(contacts).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const selectRecipeSchema = createSelectSchema(recipes);\n\nexport type InsertRecipe = z.infer<typeof insertRecipeSchema>;\nexport type Recipe = z.infer<typeof selectRecipeSchema>;\nexport type InsertContact = z.infer<typeof insertContactSchema>;\nexport type Contact = typeof contacts.$inferSelect;\n","size_bytes":2196},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/lib/theme\";\nimport { Navbar } from \"@/components/navbar\";\nimport { Footer } from \"@/components/footer\";\nimport Home from \"@/pages/home\";\nimport Recipes from \"@/pages/recipes\";\nimport RecipeDetail from \"@/pages/recipe-detail\";\nimport About from \"@/pages/about\";\nimport Contact from \"@/pages/contact\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/recipes\" component={Recipes} />\n      <Route path=\"/recipe/:id\" component={RecipeDetail} />\n      <Route path=\"/about\" component={About} />\n      <Route path=\"/contact\" component={Contact} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  // Generate floating particles\n  const particles = Array.from({ length: 20 }, (_, i) => (\n    <div\n      key={i}\n      className=\"particle\"\n      style={{\n        left: `${Math.random() * 100}%`,\n        animationDelay: `${Math.random() * 15}s`,\n      }}\n    />\n  ));\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider defaultTheme=\"light\" storageKey=\"sathi-ko-recipe-theme\">\n        <TooltipProvider>\n          <div className=\"min-h-screen bg-background text-foreground animated-background\">\n            {/* Geometric Pattern Background */}\n            <div className=\"geometric-pattern\" />\n            \n            {/* Moving Orbs */}\n            <div className=\"moving-orbs\">\n              <div className=\"orb orb-1\"></div>\n              <div className=\"orb orb-2\"></div>\n              <div className=\"orb orb-3\"></div>\n            </div>\n            \n            {/* Floating Particles */}\n            <div className=\"floating-particles\">\n              {particles}\n            </div>\n            \n            {/* Main Content */}\n            <div className=\"relative z-10\">\n              <Navbar />\n              <main>\n                <Router />\n              </main>\n              <Footer />\n            </div>\n          </div>\n          <Toaster />\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2402},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@font-face {\n  font-family: 'Rosehot';\n  src: url('/fonts/Rosehot.ttf') format('truetype');\n  font-weight: normal;\n  font-style: normal;\n  font-display: swap;\n}\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(222.2 84% 4.9%);\n  --card: hsl(0 0% 100%);\n  --card-foreground: hsl(222.2 84% 4.9%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(222.2 84% 4.9%);\n  --primary: hsl(142 76% 36%);\n  --primary-foreground: hsl(355.7 100% 97.3%);\n  --secondary: hsl(210 40% 96%);\n  --secondary-foreground: hsl(222.2 47.4% 11.2%);\n  --muted: hsl(210 40% 96%);\n  --muted-foreground: hsl(215.4 16.3% 46.9%);\n  --accent: hsl(27 96% 61%);\n  --accent-foreground: hsl(210 40% 98%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(214.3 31.8% 91.4%);\n  --input: hsl(214.3 31.8% 91.4%);\n  --ring: hsl(142 76% 36%);\n  --chart-1: hsl(142 76% 36%);\n  --chart-2: hsl(27 96% 61%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(142 76% 36%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\n  --sidebar-accent-foreground: hsl(142 76% 36%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(142 76% 36%);\n  --font-sans: 'Rosehot', system-ui, sans-serif;\n  --font-display: 'Rosehot', system-ui, sans-serif;\n  --font-serif: 'Rosehot', Georgia, serif;\n  --font-mono: 'Rosehot', monospace;\n  --radius: 0.75rem;\n  --yellow-star: hsl(42.0290 92.8251% 56.2745%);\n}\n\n.dark {\n  --background: hsl(222.2 84% 4.9%);\n  --foreground: hsl(210 40% 98%);\n  --card: hsl(222.2 84% 4.9%);\n  --card-foreground: hsl(210 40% 98%);\n  --popover: hsl(222.2 84% 4.9%);\n  --popover-foreground: hsl(210 40% 98%);\n  --primary: hsl(142 76% 36%);\n  --primary-foreground: hsl(355.7 100% 97.3%);\n  --secondary: hsl(217.2 32.6% 17.5%);\n  --secondary-foreground: hsl(210 40% 98%);\n  --muted: hsl(217.2 32.6% 17.5%);\n  --muted-foreground: hsl(215 20.2% 65.1%);\n  --accent: hsl(27 96% 61%);\n  --accent-foreground: hsl(222.2 84% 4.9%);\n  --border: hsl(217.2 32.6% 17.5%);\n  --input: hsl(217.2 32.6% 17.5%);\n  --ring: hsl(142 76% 36%);\n  --sidebar: hsl(222.2 84% 4.9%);\n  --sidebar-foreground: hsl(210 40% 98%);\n  --sidebar-primary: hsl(142 76% 36%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(217.2 32.6% 17.5%);\n  --sidebar-accent-foreground: hsl(142 76% 36%);\n  --sidebar-border: hsl(217.2 32.6% 17.5%);\n  --sidebar-ring: hsl(142 76% 36%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    transition: background-color 0.3s ease, color 0.3s ease;\n    font-family: 'Rosehot', system-ui, sans-serif;\n  }\n\n  h1, h2, h3, h4, h5, h6 {\n    font-family: 'Rosehot', system-ui, sans-serif;\n  }\n\n  button, input, textarea, select, .btn {\n    font-family: 'Rosehot', system-ui, sans-serif;\n  }\n\n  /* Ensure all text elements use Rosehot */\n  * {\n    font-family: 'Rosehot', system-ui, sans-serif;\n  }\n\n  html {\n    scroll-behavior: smooth;\n  }\n}\n\n@layer components {\n  .hero-gradient {\n    background: linear-gradient(135deg, hsl(142 76% 36%) 0%, hsl(142 86% 28%) 100%);\n  }\n\n  /* Animated Background Textures */\n  .animated-background {\n    position: relative;\n    overflow: hidden;\n  }\n\n  .animated-background::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background-image: \n      radial-gradient(circle at 20% 50%, rgba(34, 197, 94, 0.08) 0%, transparent 50%),\n      radial-gradient(circle at 80% 20%, rgba(251, 146, 60, 0.1) 0%, transparent 50%),\n      radial-gradient(circle at 40% 80%, rgba(34, 197, 94, 0.06) 0%, transparent 50%);\n    animation: float 20s ease-in-out infinite;\n    pointer-events: none;\n    z-index: 0;\n  }\n\n  .animated-background::after {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background-image: \n      linear-gradient(45deg, transparent 45%, rgba(34, 197, 94, 0.03) 48%, rgba(34, 197, 94, 0.03) 52%, transparent 55%),\n      linear-gradient(-45deg, transparent 45%, rgba(251, 146, 60, 0.03) 48%, rgba(251, 146, 60, 0.03) 52%, transparent 55%),\n      repeating-conic-gradient(from 0deg at 50% 50%, transparent 0deg, rgba(34, 197, 94, 0.02) 90deg, transparent 180deg);\n    background-size: 60px 60px, 60px 60px, 120px 120px;\n    animation: drift 30s linear infinite;\n    pointer-events: none;\n    z-index: 0;\n  }\n\n  /* Floating Particles */\n  .floating-particles {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    pointer-events: none;\n    z-index: 1;\n  }\n\n  .particle {\n    position: absolute;\n    width: 6px;\n    height: 6px;\n    background: rgba(34, 197, 94, 0.3);\n    border-radius: 50%;\n    animation: particle-float 15s ease-in-out infinite;\n    box-shadow: 0 0 12px rgba(34, 197, 94, 0.4);\n  }\n\n  .particle:nth-child(2n) {\n    background: rgba(251, 146, 60, 0.25);\n    animation-delay: -5s;\n    animation-duration: 20s;\n    box-shadow: 0 0 15px rgba(251, 146, 60, 0.3);\n  }\n\n  .particle:nth-child(3n) {\n    background: rgba(34, 197, 94, 0.2);\n    animation-delay: -10s;\n    animation-duration: 25s;\n    box-shadow: 0 0 18px rgba(34, 197, 94, 0.25);\n  }\n\n  .particle:nth-child(4n) {\n    width: 8px;\n    height: 8px;\n    background: rgba(251, 146, 60, 0.2);\n    animation-delay: -15s;\n    animation-duration: 30s;\n    box-shadow: 0 0 20px rgba(251, 146, 60, 0.2);\n  }\n\n  /* Subtle Geometric Patterns */\n  .geometric-pattern {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-image: \n      repeating-linear-gradient(\n        90deg,\n        transparent,\n        transparent 100px,\n        rgba(34, 197, 94, 0.02) 101px,\n        rgba(34, 197, 94, 0.02) 102px\n      ),\n      repeating-linear-gradient(\n        0deg,\n        transparent,\n        transparent 100px,\n        rgba(251, 146, 60, 0.02) 101px,\n        rgba(251, 146, 60, 0.02) 102px\n      );\n    animation: pattern-shift 40s linear infinite;\n    pointer-events: none;\n    z-index: 0;\n  }\n\n  /* Moving Orbs */\n  .moving-orbs {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    pointer-events: none;\n    z-index: 1;\n  }\n\n  .orb {\n    position: absolute;\n    border-radius: 50%;\n    filter: blur(2px);\n    pointer-events: none;\n  }\n\n  .orb-1 {\n    width: 80px;\n    height: 80px;\n    background: radial-gradient(circle, rgba(34, 197, 94, 0.15) 0%, transparent 70%);\n    top: 20%;\n    left: 10%;\n    animation: orb-float-1 25s ease-in-out infinite;\n  }\n\n  .orb-2 {\n    width: 120px;\n    height: 120px;\n    background: radial-gradient(circle, rgba(251, 146, 60, 0.12) 0%, transparent 70%);\n    top: 60%;\n    right: 15%;\n    animation: orb-float-2 30s ease-in-out infinite;\n  }\n\n  .orb-3 {\n    width: 60px;\n    height: 60px;\n    background: radial-gradient(circle, rgba(34, 197, 94, 0.18) 0%, transparent 70%);\n    bottom: 30%;\n    left: 70%;\n    animation: orb-float-3 20s ease-in-out infinite;\n  }\n\n  .recipe-card {\n    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n    position: relative;\n  }\n\n  .recipe-card:hover {\n    transform: translateY(-4px);\n    box-shadow: 0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1);\n  }\n\n  .recipe-card::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background: linear-gradient(135deg, rgba(34, 197, 94, 0.02) 0%, rgba(251, 146, 60, 0.02) 100%);\n    border-radius: inherit;\n    opacity: 0;\n    transition: opacity 0.3s ease;\n    pointer-events: none;\n    z-index: 0;\n  }\n\n  .recipe-card:hover::before {\n    opacity: 1;\n  }\n\n  .filter-pill {\n    transition: all 0.2s ease;\n  }\n\n  .filter-pill:hover {\n    transform: scale(1.05) translateY(-2px);\n    box-shadow: 0 5px 15px rgba(255, 255, 255, 0.2);\n  }\n\n  .filter-pill.active {\n    background-color: hsl(142 76% 36%);\n    color: white;\n  }\n\n  .filter-pill-1 {\n    animation: filter-slide-in 0.5s ease-out 1.1s both;\n  }\n\n  .filter-pill-2 {\n    animation: filter-slide-in 0.5s ease-out 1.2s both;\n  }\n\n  .filter-pill-3 {\n    animation: filter-slide-in 0.5s ease-out 1.3s both;\n  }\n\n  .filter-pill-4 {\n    animation: filter-slide-in 0.5s ease-out 1.4s both;\n  }\n\n  .btn-scale {\n    transition: all 0.2s ease;\n    position: relative;\n    overflow: hidden;\n  }\n\n  .btn-scale:active {\n    transform: scale(0.95);\n  }\n\n  .btn-scale::before {\n    content: '';\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    width: 0;\n    height: 0;\n    background: rgba(255, 255, 255, 0.2);\n    border-radius: 50%;\n    transform: translate(-50%, -50%);\n    transition: width 0.3s ease, height 0.3s ease;\n    pointer-events: none;\n  }\n\n  .btn-scale:hover::before {\n    width: 300px;\n    height: 300px;\n  }\n\n  .star-rating {\n    color: var(--yellow-star);\n  }\n\n  .mobile-menu {\n    transform: translateX(-100%);\n    transition: transform 0.3s ease;\n  }\n\n  .mobile-menu.open {\n    transform: translateX(0);\n  }\n\n  .cooking-step {\n    font-size: 1.25rem;\n    line-height: 1.8;\n  }\n\n  .step-counter {\n    background: linear-gradient(135deg, hsl(142 76% 36%) 0%, hsl(142 86% 28%) 100%);\n  }\n\n  /* Hero Section Micro Animations */\n  .hero-content {\n    animation: hero-entrance 0.8s ease-out;\n  }\n\n  .hero-title {\n    animation: title-slide-up 0.6s ease-out 0.2s both;\n  }\n\n  .hero-subtitle {\n    animation: subtitle-bounce 0.8s ease-out 0.4s both;\n    display: inline-block;\n  }\n\n  .hero-description {\n    animation: description-fade 0.6s ease-out 0.6s both;\n  }\n\n  .hero-search {\n    animation: search-slide-up 0.7s ease-out 0.8s both;\n  }\n\n  .hero-filters {\n    animation: filters-stagger 0.8s ease-out 1.0s both;\n  }\n\n  .hero-cta {\n    animation: cta-bounce 0.6s ease-out 1.2s both;\n  }\n\n  .search-container {\n    position: relative;\n    transition: all 0.3s ease;\n  }\n\n  .search-container:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);\n  }\n\n  .search-input {\n    transition: all 0.3s ease;\n  }\n\n  .search-input:focus {\n    transform: scale(1.02);\n    box-shadow: 0 8px 25px rgba(251, 146, 60, 0.2);\n  }\n\n  .search-icon {\n    transition: all 0.3s ease;\n  }\n\n  .search-container:hover .search-icon {\n    transform: scale(1.1);\n    color: hsl(27 96% 61%);\n  }\n\n  /* Floating Food Background Elements */\n  .food-background {\n    pointer-events: none;\n    z-index: 1;\n  }\n\n  .spice-particle {\n    position: absolute;\n    font-size: 1.5rem;\n    opacity: 0.6;\n    animation: spice-float 20s linear infinite;\n    filter: drop-shadow(0 0 8px rgba(255, 255, 255, 0.3));\n  }\n\n  .spice-1 { top: 10%; left: 5%; animation-delay: 0s; animation-duration: 25s; }\n  .spice-2 { top: 20%; right: 15%; animation-delay: -3s; animation-duration: 30s; }\n  .spice-3 { top: 40%; left: 20%; animation-delay: -8s; animation-duration: 22s; }\n  .spice-4 { top: 60%; right: 25%; animation-delay: -12s; animation-duration: 28s; }\n  .spice-5 { top: 70%; left: 10%; animation-delay: -18s; animation-duration: 24s; }\n  .spice-6 { top: 30%; right: 5%; animation-delay: -5s; animation-duration: 26s; }\n  .spice-7 { top: 80%; left: 30%; animation-delay: -15s; animation-duration: 23s; }\n  .spice-8 { top: 15%; left: 70%; animation-delay: -10s; animation-duration: 27s; }\n\n  .utensil-float {\n    position: absolute;\n    font-size: 1.8rem;\n    opacity: 0.4;\n    animation: utensil-drift 35s linear infinite;\n    filter: drop-shadow(0 0 10px rgba(255, 255, 255, 0.2));\n  }\n\n  .utensil-1 { top: 25%; left: 80%; animation-delay: -5s; }\n  .utensil-2 { top: 65%; right: 10%; animation-delay: -15s; }\n  .utensil-3 { top: 45%; left: 15%; animation-delay: -25s; }\n\n  .grain-float {\n    position: absolute;\n    font-size: 1.2rem;\n    opacity: 0.5;\n    animation: grain-scatter 18s ease-in-out infinite;\n    filter: drop-shadow(0 0 6px rgba(255, 255, 255, 0.4));\n  }\n\n  .grain-1 { top: 35%; right: 30%; animation-delay: -2s; }\n  .grain-2 { top: 55%; left: 60%; animation-delay: -8s; }\n  .grain-3 { top: 75%; right: 50%; animation-delay: -14s; }\n\n  .traditional-element {\n    position: absolute;\n    font-size: 2rem;\n    opacity: 0.3;\n    animation: traditional-spin 40s linear infinite;\n    filter: drop-shadow(0 0 12px rgba(255, 255, 255, 0.2));\n  }\n\n  .element-1 { top: 50%; left: 5%; animation-delay: -8s; }\n  .element-2 { top: 20%; right: 40%; animation-delay: -20s; }\n  .element-3 { top: 85%; left: 75%; animation-delay: -32s; }\n}\n\n@layer utilities {\n  .text-yellow-star {\n    color: var(--yellow-star);\n  }\n  \n  .bg-yellow-star {\n    background-color: var(--yellow-star);\n  }\n}\n\n/* Keyframe Animations */\n@keyframes float {\n  0%, 100% {\n    transform: translateY(0px) rotate(0deg) scale(1);\n  }\n  25% {\n    transform: translateY(-10px) rotate(1deg) scale(1.02);\n  }\n  50% {\n    transform: translateY(-5px) rotate(-1deg) scale(0.98);\n  }\n  75% {\n    transform: translateY(-15px) rotate(0.5deg) scale(1.01);\n  }\n}\n\n@keyframes drift {\n  0% {\n    transform: translateX(0) translateY(0) rotate(0deg);\n  }\n  25% {\n    transform: translateX(-20px) translateY(-10px) rotate(90deg);\n  }\n  50% {\n    transform: translateX(10px) translateY(-20px) rotate(180deg);\n  }\n  75% {\n    transform: translateX(-10px) translateY(-30px) rotate(270deg);\n  }\n  100% {\n    transform: translateX(0) translateY(0) rotate(360deg);\n  }\n}\n\n@keyframes particle-float {\n  0% {\n    transform: translateY(100vh) translateX(0) scale(0);\n    opacity: 0;\n  }\n  10% {\n    opacity: 1;\n    transform: translateY(90vh) translateX(10px) scale(1);\n  }\n  50% {\n    opacity: 0.8;\n    transform: translateY(50vh) translateX(-20px) scale(1.2);\n  }\n  90% {\n    opacity: 0.3;\n    transform: translateY(10vh) translateX(15px) scale(0.8);\n  }\n  100% {\n    transform: translateY(-10vh) translateX(0) scale(0);\n    opacity: 0;\n  }\n}\n\n@keyframes pattern-shift {\n  0% {\n    transform: translateX(0) translateY(0);\n  }\n  25% {\n    transform: translateX(-25px) translateY(25px);\n  }\n  50% {\n    transform: translateX(-50px) translateY(0);\n  }\n  75% {\n    transform: translateX(-25px) translateY(-25px);\n  }\n  100% {\n    transform: translateX(0) translateY(0);\n  }\n}\n\n@keyframes glow-pulse {\n  0%, 100% {\n    opacity: 0.3;\n    transform: scale(1);\n  }\n  50% {\n    opacity: 0.8;\n    transform: scale(1.05);\n  }\n}\n\n@keyframes shimmer {\n  0% {\n    background-position: -200% 0;\n  }\n  100% {\n    background-position: 200% 0;\n  }\n}\n\n@keyframes orb-float-1 {\n  0%, 100% {\n    transform: translate(0, 0) scale(1);\n  }\n  25% {\n    transform: translate(30px, -20px) scale(1.1);\n  }\n  50% {\n    transform: translate(-20px, -40px) scale(0.9);\n  }\n  75% {\n    transform: translate(40px, -10px) scale(1.05);\n  }\n}\n\n@keyframes orb-float-2 {\n  0%, 100% {\n    transform: translate(0, 0) scale(1);\n  }\n  33% {\n    transform: translate(-40px, 30px) scale(1.2);\n  }\n  66% {\n    transform: translate(20px, -25px) scale(0.8);\n  }\n}\n\n@keyframes orb-float-3 {\n  0%, 100% {\n    transform: translate(0, 0) scale(1);\n  }\n  20% {\n    transform: translate(-30px, 20px) scale(1.3);\n  }\n  40% {\n    transform: translate(25px, -30px) scale(0.7);\n  }\n  60% {\n    transform: translate(-15px, 15px) scale(1.1);\n  }\n  80% {\n    transform: translate(35px, -20px) scale(0.9);\n  }\n}\n\n/* Hero Section Keyframes */\n@keyframes hero-entrance {\n  0% {\n    opacity: 0;\n    transform: translateY(30px);\n  }\n  100% {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n@keyframes title-slide-up {\n  0% {\n    opacity: 0;\n    transform: translateY(40px);\n  }\n  100% {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n@keyframes subtitle-bounce {\n  0% {\n    opacity: 0;\n    transform: translateY(30px) scale(0.8);\n  }\n  60% {\n    opacity: 1;\n    transform: translateY(-5px) scale(1.05);\n  }\n  100% {\n    opacity: 1;\n    transform: translateY(0) scale(1);\n  }\n}\n\n@keyframes description-fade {\n  0% {\n    opacity: 0;\n    transform: translateY(20px);\n  }\n  100% {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n@keyframes search-slide-up {\n  0% {\n    opacity: 0;\n    transform: translateY(30px) scale(0.95);\n  }\n  100% {\n    opacity: 1;\n    transform: translateY(0) scale(1);\n  }\n}\n\n@keyframes filters-stagger {\n  0% {\n    opacity: 0;\n    transform: translateY(20px);\n  }\n  100% {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n@keyframes cta-bounce {\n  0% {\n    opacity: 0;\n    transform: translateY(30px) scale(0.9);\n  }\n  50% {\n    opacity: 0.8;\n    transform: translateY(-10px) scale(1.02);\n  }\n  100% {\n    opacity: 1;\n    transform: translateY(0) scale(1);\n  }\n}\n\n@keyframes filter-slide-in {\n  0% {\n    opacity: 0;\n    transform: translateX(-30px) scale(0.8);\n  }\n  60% {\n    opacity: 0.8;\n    transform: translateX(5px) scale(1.05);\n  }\n  100% {\n    opacity: 1;\n    transform: translateX(0) scale(1);\n  }\n}\n\n/* Food Background Animations */\n@keyframes spice-float {\n  0% {\n    transform: translateX(-100px) translateY(0) rotate(0deg) scale(1);\n    opacity: 0;\n  }\n  10% {\n    opacity: 0.6;\n  }\n  50% {\n    transform: translateX(50vw) translateY(-20px) rotate(180deg) scale(1.2);\n    opacity: 0.8;\n  }\n  90% {\n    opacity: 0.4;\n  }\n  100% {\n    transform: translateX(calc(100vw + 100px)) translateY(-40px) rotate(360deg) scale(0.8);\n    opacity: 0;\n  }\n}\n\n@keyframes utensil-drift {\n  0% {\n    transform: translateX(-150px) translateY(0) rotate(0deg);\n    opacity: 0;\n  }\n  15% {\n    opacity: 0.4;\n  }\n  50% {\n    transform: translateX(50vw) translateY(30px) rotate(45deg);\n    opacity: 0.6;\n  }\n  85% {\n    opacity: 0.3;\n  }\n  100% {\n    transform: translateX(calc(100vw + 150px)) translateY(60px) rotate(90deg);\n    opacity: 0;\n  }\n}\n\n@keyframes grain-scatter {\n  0%, 100% {\n    transform: translateY(0) translateX(0) rotate(0deg) scale(1);\n    opacity: 0.5;\n  }\n  25% {\n    transform: translateY(-15px) translateX(10px) rotate(90deg) scale(1.1);\n    opacity: 0.7;\n  }\n  50% {\n    transform: translateY(-30px) translateX(-5px) rotate(180deg) scale(0.9);\n    opacity: 0.8;\n  }\n  75% {\n    transform: translateY(-10px) translateX(15px) rotate(270deg) scale(1.05);\n    opacity: 0.6;\n  }\n}\n\n@keyframes traditional-spin {\n  0% {\n    transform: translateX(-200px) rotate(0deg) scale(1);\n    opacity: 0;\n  }\n  20% {\n    opacity: 0.3;\n  }\n  50% {\n    transform: translateX(50vw) rotate(180deg) scale(1.1);\n    opacity: 0.4;\n  }\n  80% {\n    opacity: 0.2;\n  }\n  100% {\n    transform: translateX(calc(100vw + 200px)) rotate(360deg) scale(0.9);\n    opacity: 0;\n  }\n}\n\n/* Responsive Animation Adjustments */\n@media (prefers-reduced-motion: reduce) {\n  .animated-background::before,\n  .animated-background::after,\n  .particle,\n  .geometric-pattern,\n  .hero-content,\n  .hero-title,\n  .hero-subtitle,\n  .hero-description,\n  .hero-search,\n  .hero-filters,\n  .hero-cta,\n  .spice-particle,\n  .utensil-float,\n  .grain-float,\n  .traditional-element {\n    animation: none;\n  }\n}\n\n@media (max-width: 768px) {\n  .particle {\n    width: 3px;\n    height: 3px;\n  }\n  \n  .animated-background::after {\n    background-size: 40px 40px;\n  }\n}\n","size_bytes":19165},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/footer.tsx":{"content":"import { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Facebook, Instagram, Youtube, ArrowRight } from \"lucide-react\";\n\nexport function Footer() {\n  return (\n    <footer className=\"bg-card border-t border-border\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8\">\n          {/* Brand */}\n          <div className=\"md:col-span-1\">\n            <div className=\"flex items-center space-x-2 mb-4\">\n              <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n                <span className=\"text-primary-foreground font-bold text-sm\">SR</span>\n              </div>\n              <div>\n                <h3 className=\"font-bold text-lg\">Sathi Ko Recipe</h3>\n                <p className=\"text-xs text-muted-foreground\">Simple Recipe</p>\n              </div>\n            </div>\n            <p className=\"text-muted-foreground text-sm mb-4\">\n              Empowering international students and cooking beginners with simple, affordable, and delicious recipes from around the world.\n            </p>\n            <div className=\"flex space-x-3\">\n              <Button\n                size=\"icon\"\n                variant=\"ghost\"\n                className=\"w-8 h-8 rounded-full hover:bg-primary hover:text-primary-foreground transition-colors\"\n                data-testid=\"link-facebook\"\n              >\n                <Facebook className=\"w-4 h-4\" />\n              </Button>\n              <Button\n                size=\"icon\"\n                variant=\"ghost\"\n                className=\"w-8 h-8 rounded-full hover:bg-primary hover:text-primary-foreground transition-colors\"\n                data-testid=\"link-instagram\"\n              >\n                <Instagram className=\"w-4 h-4\" />\n              </Button>\n              <Button\n                size=\"icon\"\n                variant=\"ghost\"\n                className=\"w-8 h-8 rounded-full hover:bg-primary hover:text-primary-foreground transition-colors\"\n                data-testid=\"link-youtube\"\n              >\n                <Youtube className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          </div>\n\n          {/* Quick Links */}\n          <div>\n            <h4 className=\"font-semibold text-foreground mb-4\">Quick Links</h4>\n            <ul className=\"space-y-2 text-sm\">\n              <li>\n                <Link href=\"/recipes\" data-testid=\"footer-link-recipes\">\n                  <span className=\"text-muted-foreground hover:text-primary transition-colors cursor-pointer\">\n                    All Recipes\n                  </span>\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/recipes?category=Quick Meals\" data-testid=\"footer-link-quick-meals\">\n                  <span className=\"text-muted-foreground hover:text-primary transition-colors cursor-pointer\">\n                    Quick Meals\n                  </span>\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/recipes?category=Budget\" data-testid=\"footer-link-budget\">\n                  <span className=\"text-muted-foreground hover:text-primary transition-colors cursor-pointer\">\n                    Budget Recipes\n                  </span>\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/recipes?category=Vegetarian\" data-testid=\"footer-link-vegetarian\">\n                  <span className=\"text-muted-foreground hover:text-primary transition-colors cursor-pointer\">\n                    Vegetarian\n                  </span>\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/recipes?category=Trending\" data-testid=\"footer-link-trending\">\n                  <span className=\"text-muted-foreground hover:text-primary transition-colors cursor-pointer\">\n                    Trending\n                  </span>\n                </Link>\n              </li>\n            </ul>\n          </div>\n\n          {/* Support */}\n          <div>\n            <h4 className=\"font-semibold text-foreground mb-4\">Support</h4>\n            <ul className=\"space-y-2 text-sm\">\n              <li>\n                <span className=\"text-muted-foreground hover:text-primary transition-colors cursor-pointer\">\n                  Help Center\n                </span>\n              </li>\n              <li>\n                <span className=\"text-muted-foreground hover:text-primary transition-colors cursor-pointer\">\n                  Cooking Tips\n                </span>\n              </li>\n              <li>\n                <span className=\"text-muted-foreground hover:text-primary transition-colors cursor-pointer\">\n                  Submit Recipe\n                </span>\n              </li>\n              <li>\n                <span className=\"text-muted-foreground hover:text-primary transition-colors cursor-pointer\">\n                  Privacy Policy\n                </span>\n              </li>\n              <li>\n                <span className=\"text-muted-foreground hover:text-primary transition-colors cursor-pointer\">\n                  Terms of Service\n                </span>\n              </li>\n            </ul>\n          </div>\n\n          {/* Newsletter */}\n          <div>\n            <h4 className=\"font-semibold text-foreground mb-4\">Stay Updated</h4>\n            <p className=\"text-muted-foreground text-sm mb-4\">\n              Get weekly recipe inspiration and cooking tips delivered to your inbox.\n            </p>\n            <div className=\"flex\">\n              <Input\n                type=\"email\"\n                placeholder=\"Your email\"\n                className=\"flex-1 rounded-r-none\"\n                data-testid=\"input-newsletter-email\"\n              />\n              <Button\n                className=\"bg-primary text-primary-foreground hover:bg-green-700 rounded-l-none\"\n                data-testid=\"button-newsletter-subscribe\"\n              >\n                <ArrowRight className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"border-t border-border mt-12 pt-8 flex flex-col sm:flex-row justify-between items-center\">\n          <p className=\"text-muted-foreground text-sm\">\n            © 2024 Sathi Ko Recipe. Made with <span className=\"text-red-500\">❤</span> for students worldwide.\n          </p>\n          <p className=\"text-muted-foreground text-sm mt-2 sm:mt-0\">\n            Made with <span className=\"text-red-500\">❤</span> by students, for students.\n          </p>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":6676},"client/src/components/navbar.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { ThemeToggle } from \"@/components/theme-provider\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Menu, X, ChevronDown } from \"lucide-react\";\n\nexport function Navbar() {\n  const [location] = useLocation();\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n\n  const navigation = [\n    { name: \"Home\", href: \"/\" },\n    { name: \"About\", href: \"/about\" },\n    { name: \"Contact\", href: \"/contact\" },\n  ];\n\n  const recipeCategories = [\n    { name: \"All Recipes\", href: \"/recipes\", description: \"View all authentic Nepali recipes\" },\n    { name: \"Vegetarian\", href: \"/recipes?category=Vegetarian\", description: \"Plant-based traditional dishes\" },\n    { name: \"Non-Veg\", href: \"/recipes?category=Non-Veg\", description: \"Meat and poultry specialties\" },\n    { name: \"Quick Meals\", href: \"/recipes?quick=true\", description: \"Ready in 30 minutes or less\" },\n    { name: \"Budget\", href: \"/recipes?budget=true\", description: \"Affordable student-friendly meals\" },\n  ];\n\n  const isActive = (href: string) => {\n    if (href === \"/\" && location === \"/\") return true;\n    return href !== \"/\" && location.startsWith(href);\n  };\n\n  return (\n    <nav className=\"bg-card border-b border-border sticky top-0 z-50 backdrop-blur-sm\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between h-16\">\n          <div className=\"flex items-center\">\n            <Link href=\"/\" data-testid=\"link-home\">\n              <div className=\"flex items-center space-x-2 cursor-pointer\">\n                <div className=\"w-12 h-12 rounded-lg flex items-center justify-center\">\n                  <img \n                    src=\"/src/assets/logo.png\" \n                    alt=\"Sathi Ko Recipe Logo\" \n                    className=\"w-12 h-12 object-contain\"\n                  />\n                </div>\n                <div>\n                  <h1 className=\"font-bold text-lg\">Sathi Ko Recipe</h1>\n                  <p className=\"text-xs text-muted-foreground\">Simple Recipe</p>\n                </div>\n              </div>\n            </Link>\n          </div>\n\n          {/* Desktop Navigation */}\n          <div className=\"hidden md:flex items-center space-x-8\">\n            {navigation.map((item) => (\n              <Link key={item.name} href={item.href} data-testid={`link-${item.name.toLowerCase()}`}>\n                <span\n                  className={`nav-link font-medium transition-colors duration-200 cursor-pointer ${\n                    isActive(item.href)\n                      ? \"text-primary\"\n                      : \"text-muted-foreground hover:text-primary\"\n                  }`}\n                >\n                  {item.name}\n                </span>\n              </Link>\n            ))}\n            \n            {/* Recipes Dropdown */}\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild data-testid=\"dropdown-recipes\">\n                <Button \n                  variant=\"ghost\" \n                  className={`nav-link font-medium transition-colors duration-200 flex items-center space-x-1 ${\n                    location.startsWith('/recipes')\n                      ? \"text-primary\"\n                      : \"text-muted-foreground hover:text-primary\"\n                  }`}\n                >\n                  <span>Recipes</span>\n                  <ChevronDown className=\"w-4 h-4\" />\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"end\" className=\"w-64\">\n                {recipeCategories.map((category) => (\n                  <DropdownMenuItem key={category.name} asChild>\n                    <Link href={category.href} data-testid={`dropdown-${category.name.toLowerCase().replace(' ', '-')}`}>\n                      <div className=\"cursor-pointer\">\n                        <div className=\"font-medium\">{category.name}</div>\n                        <div className=\"text-sm text-muted-foreground\">{category.description}</div>\n                      </div>\n                    </Link>\n                  </DropdownMenuItem>\n                ))}\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </div>\n\n          {/* Theme Toggle & Mobile Menu */}\n          <div className=\"flex items-center space-x-2\">\n            <ThemeToggle />\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"md:hidden rounded-lg\"\n              onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}\n              data-testid=\"button-mobile-menu\"\n            >\n              <Menu className=\"h-5 w-5\" />\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      {/* Mobile Menu */}\n      {isMobileMenuOpen && (\n        <div className=\"md:hidden fixed inset-y-0 left-0 w-64 bg-card border-r border-border z-40 mobile-menu open\">\n          <div className=\"p-4\">\n            <div className=\"flex items-center justify-between mb-8\">\n              <Link href=\"/\">\n                <div className=\"flex items-center space-x-2 cursor-pointer\">\n                  <div className=\"w-10 h-10 rounded-md flex items-center justify-center\">\n                    <img \n                      src=\"/src/assets/logo.png\" \n                      alt=\"Sathi Ko Recipe Logo\" \n                      className=\"w-10 h-10 object-contain\"\n                    />\n                  </div>\n                  <span className=\"font-semibold\">Sathi Ko Recipe</span>\n                </div>\n              </Link>\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={() => setIsMobileMenuOpen(false)}\n                data-testid=\"button-close-mobile-menu\"\n                className=\"p-1\"\n              >\n                <X className=\"h-5 w-5\" />\n              </Button>\n            </div>\n            <nav className=\"space-y-4\">\n              {navigation.map((item) => (\n                <Link key={item.name} href={item.href} data-testid={`mobile-link-${item.name.toLowerCase()}`}>\n                  <div\n                    className=\"block py-2 px-4 rounded-lg hover:bg-muted transition-colors cursor-pointer\"\n                    onClick={() => setIsMobileMenuOpen(false)}\n                  >\n                    {item.name}\n                  </div>\n                </Link>\n              ))}\n              \n              {/* Mobile Recipe Categories */}\n              <div className=\"border-t border-border pt-4 mt-4\">\n                <div className=\"font-semibold text-sm text-muted-foreground mb-3 px-4\">Recipe Categories</div>\n                {recipeCategories.map((category) => (\n                  <Link key={category.name} href={category.href} data-testid={`mobile-category-${category.name.toLowerCase().replace(' ', '-')}`}>\n                    <div\n                      className=\"block py-2 px-4 rounded-lg hover:bg-muted transition-colors cursor-pointer\"\n                      onClick={() => setIsMobileMenuOpen(false)}\n                    >\n                      <div className=\"font-medium\">{category.name}</div>\n                      <div className=\"text-xs text-muted-foreground\">{category.description}</div>\n                    </div>\n                  </Link>\n                ))}\n              </div>\n            </nav>\n          </div>\n        </div>\n      )}\n\n      {/* Mobile Menu Backdrop */}\n      {isMobileMenuOpen && (\n        <div\n          className=\"md:hidden fixed inset-0 bg-black bg-opacity-50 z-30\"\n          onClick={() => setIsMobileMenuOpen(false)}\n        />\n      )}\n    </nav>\n  );\n}\n","size_bytes":7744},"client/src/components/recipe-card.tsx":{"content":"import { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Clock, Users, DollarSign, Star } from \"lucide-react\";\nimport type { Recipe } from \"@shared/schema\";\n\ninterface RecipeCardProps {\n  recipe: Recipe;\n}\n\nexport function RecipeCard({ recipe }: RecipeCardProps) {\n  const renderStars = (rating: number) => {\n    const stars = [];\n    const fullStars = Math.floor(rating);\n    const hasHalfStar = rating % 1 >= 0.5;\n    \n    for (let i = 0; i < 5; i++) {\n      if (i < fullStars) {\n        // Full star\n        stars.push(\n          <Star\n            key={i}\n            className=\"w-4 h-4 text-yellow-400 fill-current\"\n          />\n        );\n      } else if (i === fullStars && hasHalfStar) {\n        // Half star\n        stars.push(\n          <div key={i} className=\"relative w-4 h-4\">\n            <Star className=\"w-4 h-4 text-gray-300 dark:text-gray-600\" />\n            <Star className=\"w-4 h-4 text-yellow-400 fill-current absolute top-0 left-0\" style={{clipPath: 'polygon(0 0, 50% 0, 50% 100%, 0 100%)'}} />\n          </div>\n        );\n      } else {\n        // Empty star\n        stars.push(\n          <Star\n            key={i}\n            className=\"w-4 h-4 text-gray-300 dark:text-gray-600\"\n          />\n        );\n      }\n    }\n    \n    return stars;\n  };\n\n  return (\n    <div className=\"recipe-card bg-card rounded-xl shadow-lg overflow-hidden\" data-testid={`card-recipe-${recipe.id}`}>\n      <img\n        src={recipe.image}\n        alt={recipe.title}\n        className=\"w-full h-48 object-cover\"\n        loading=\"lazy\"\n        onError={(e) => {\n          // Fallback image if recipe image fails to load\n          (e.target as HTMLImageElement).src = \"https://images.unsplash.com/photo-1546069901-ba9599a7e63c?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300\";\n        }}\n      />\n      <div className=\"p-4\">\n        <div className=\"flex items-center justify-between mb-2\">\n          <Badge\n            variant=\"secondary\"\n            className=\"bg-green-100 text-primary text-xs font-medium dark:bg-green-900 dark:text-green-300\"\n            data-testid={`badge-category-${recipe.id}`}\n          >\n            {recipe.category === \"Vegetarian\" ? \"Veg\" : recipe.category}\n          </Badge>\n          <div className=\"flex items-center space-x-1\" data-testid={`rating-${recipe.id}`}>\n            {renderStars(recipe.rating)}\n            <span className=\"text-xs font-medium text-muted-foreground\">{recipe.rating}</span>\n          </div>\n        </div>\n        <h3 className=\"font-semibold text-lg mb-2\" data-testid={`title-${recipe.id}`}>\n          {recipe.title}\n        </h3>\n        <p className=\"text-muted-foreground text-sm mb-3 line-clamp-2\" data-testid={`description-${recipe.id}`}>\n          {recipe.description}\n        </p>\n        <div className=\"flex items-center justify-between text-sm text-muted-foreground mb-4\">\n          <span className=\"flex items-center space-x-1\" data-testid={`cook-time-${recipe.id}`}>\n            <Clock className=\"w-4 h-4\" />\n            <span>{recipe.cookTime} min</span>\n          </span>\n          <span className=\"flex items-center space-x-1\" data-testid={`servings-${recipe.id}`}>\n            <Users className=\"w-4 h-4\" />\n            <span>{recipe.servings} servings</span>\n          </span>\n          <span className=\"flex items-center space-x-1\" data-testid={`cost-${recipe.id}`}>\n            <DollarSign className=\"w-4 h-4\" />\n            <span>${recipe.cost.toFixed(2)}</span>\n          </span>\n        </div>\n        <Link href={`/recipe/${recipe.id}`} data-testid={`link-recipe-${recipe.id}`}>\n          <Button className=\"w-full bg-primary text-primary-foreground hover:bg-green-700 transition-colors btn-scale\">\n            View Recipe\n          </Button>\n        </Link>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3848},"client/src/components/theme-provider.tsx":{"content":"import { useTheme } from \"@/lib/theme\";\nimport { Button } from \"@/components/ui/button\";\nimport { Moon, Sun } from \"lucide-react\";\n\nexport function ThemeToggle() {\n  const { theme, setTheme } = useTheme();\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={() => setTheme(theme === \"light\" ? \"dark\" : \"light\")}\n      data-testid=\"button-theme-toggle\"\n      className=\"rounded-lg\"\n    >\n      <Sun className=\"h-5 w-5 rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0\" />\n      <Moon className=\"absolute h-5 w-5 rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100\" />\n      <span className=\"sr-only\">Toggle theme</span>\n    </Button>\n  );\n}\n","size_bytes":690},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    // Handle query key properly - only use string parts for URL construction\n    const [baseUrl, params] = queryKey;\n    let url = baseUrl as string;\n    \n    // If there are parameters, append them as query string\n    if (params && typeof params === 'object' && params !== null) {\n      const searchParams = new URLSearchParams();\n      Object.entries(params).forEach(([key, value]) => {\n        if (value !== undefined && value !== null) {\n          searchParams.append(key, String(value));\n        }\n      });\n      const queryString = searchParams.toString();\n      if (queryString) {\n        url += '?' + queryString;\n      }\n    }\n\n    const res = await fetch(url, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1997},"client/src/lib/theme.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"dark\" | \"light\";\n\ntype ThemeProviderProps = {\n  children: React.ReactNode;\n  defaultTheme?: Theme;\n  storageKey?: string;\n};\n\ntype ThemeProviderState = {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n};\n\nconst initialState: ThemeProviderState = {\n  theme: \"light\",\n  setTheme: () => null,\n};\n\nconst ThemeProviderContext = createContext<ThemeProviderState>(initialState);\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = \"light\",\n  storageKey = \"ui-theme\",\n  ...props\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(\n    () => (localStorage.getItem(storageKey) as Theme) || defaultTheme\n  );\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n\n    root.classList.remove(\"light\", \"dark\");\n\n    if (theme === \"dark\") {\n      root.classList.add(\"dark\");\n    } else {\n      root.classList.add(\"light\");\n    }\n  }, [theme]);\n\n  const value = {\n    theme,\n    setTheme: (theme: Theme) => {\n      localStorage.setItem(storageKey, theme);\n      setTheme(theme);\n    },\n  };\n\n  return (\n    <ThemeProviderContext.Provider {...props} value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext);\n\n  if (context === undefined)\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n\n  return context;\n};\n","size_bytes":1452},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/about.tsx":{"content":"import { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Heart, Globe, Users } from \"lucide-react\";\n\nexport default function About() {\n  return (\n    <div className=\"min-h-screen py-16\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        {/* Hero Section */}\n        <div className=\"text-center mb-16\">\n          <h1 className=\"text-4xl sm:text-5xl font-bold text-foreground mb-6\" data-testid=\"heading-about-title\">\n            About Sathi Ko Recipe\n          </h1>\n          <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\" data-testid=\"text-about-subtitle\">\n            Empowering international students and cooking beginners with simple, affordable, and delicious recipes from around the world.\n          </p>\n        </div>\n\n        {/* Mission & Story */}\n        <div className=\"grid lg:grid-cols-2 gap-12 items-center mb-16\">\n          <div>\n            <h2 className=\"text-3xl font-bold text-foreground mb-6\" data-testid=\"heading-mission\">\n              Our Mission\n            </h2>\n            <p className=\"text-lg text-muted-foreground mb-6\" data-testid=\"text-mission-description\">\n              We believe that everyone deserves access to healthy, affordable, and delicious meals, especially students who are away from home. Our mission is to make cooking accessible and enjoyable for international students and beginners.\n            </p>\n            <p className=\"text-lg text-muted-foreground mb-6\">\n              Founded by students, for students, we understand the challenges of cooking on a budget, limited time, and minimal kitchen equipment. Every recipe is tested and designed with these constraints in mind.\n            </p>\n            <div className=\"grid grid-cols-3 gap-4\" data-testid=\"stats-section\">\n              <div className=\"text-center\">\n                <div className=\"text-3xl font-bold text-primary mb-1\" data-testid=\"stat-recipes\">500+</div>\n                <div className=\"text-sm text-muted-foreground\">Recipes</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-3xl font-bold text-primary mb-1\" data-testid=\"stat-students\">50k+</div>\n                <div className=\"text-sm text-muted-foreground\">Students Helped</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-3xl font-bold text-primary mb-1\" data-testid=\"stat-countries\">25+</div>\n                <div className=\"text-sm text-muted-foreground\">Countries</div>\n              </div>\n            </div>\n          </div>\n          <div>\n            <img\n              src=\"https://images.unsplash.com/photo-1556909114-f6e7ad7d3136?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&h=400\"\n              alt=\"Students cooking together in kitchen\"\n              className=\"w-full h-80 object-cover rounded-xl shadow-lg\"\n              data-testid=\"img-mission\"\n            />\n          </div>\n        </div>\n\n        {/* Team Values */}\n        <div className=\"bg-muted rounded-2xl p-8 lg:p-12 mb-16\">\n          <h2 className=\"text-3xl font-bold text-foreground text-center mb-12\" data-testid=\"heading-values\">\n            Our Values\n          </h2>\n          <div className=\"grid md:grid-cols-3 gap-8\">\n            <div className=\"text-center\" data-testid=\"value-accessibility\">\n              <div className=\"w-16 h-16 bg-primary rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Heart className=\"w-8 h-8 text-white\" />\n              </div>\n              <h3 className=\"text-xl font-semibold text-foreground mb-3\">Accessibility</h3>\n              <p className=\"text-muted-foreground\">\n                Every recipe is designed to be simple, affordable, and achievable with basic cooking skills and equipment.\n              </p>\n            </div>\n            <div className=\"text-center\" data-testid=\"value-diversity\">\n              <div className=\"w-16 h-16 bg-accent rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Globe className=\"w-8 h-8 text-white\" />\n              </div>\n              <h3 className=\"text-xl font-semibold text-foreground mb-3\">Cultural Diversity</h3>\n              <p className=\"text-muted-foreground\">\n                We celebrate cuisines from around the world, helping students stay connected to their roots while exploring new flavors.\n              </p>\n            </div>\n            <div className=\"text-center\" data-testid=\"value-community\">\n              <div className=\"w-16 h-16 bg-green-600 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Users className=\"w-8 h-8 text-white\" />\n              </div>\n              <h3 className=\"text-xl font-semibold text-foreground mb-3\">Community</h3>\n              <p className=\"text-muted-foreground\">\n                Building a supportive community where students can share recipes, tips, and culinary experiences.\n              </p>\n            </div>\n          </div>\n        </div>\n\n        {/* Call to Action */}\n        <div className=\"text-center\" data-testid=\"cta-section\">\n          <h2 className=\"text-3xl font-bold text-foreground mb-4\" data-testid=\"heading-join-community\">\n            Join Our Community\n          </h2>\n          <p className=\"text-lg text-muted-foreground mb-8 max-w-2xl mx-auto\" data-testid=\"text-join-description\">\n            Ready to start your culinary journey? Explore our recipes, share your creations, and connect with fellow student chefs from around the world.\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Link href=\"/recipes\">\n              <Button \n                className=\"bg-primary text-primary-foreground hover:bg-green-700 transition-colors btn-scale px-8 py-3 rounded-xl font-semibold\"\n                data-testid=\"button-explore-recipes\"\n              >\n                Explore Recipes\n              </Button>\n            </Link>\n            <Link href=\"/contact\">\n              <Button \n                variant=\"secondary\"\n                className=\"hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors btn-scale px-8 py-3 rounded-xl font-semibold\"\n                data-testid=\"button-contact-us\"\n              >\n                Contact Us\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6386},"client/src/pages/contact.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Mail, MessageCircle, Instagram, Send } from \"lucide-react\";\nimport { insertContactSchema, type InsertContact } from \"@shared/schema\";\n\nexport default function Contact() {\n  const { toast } = useToast();\n  \n  const form = useForm<InsertContact>({\n    resolver: zodResolver(insertContactSchema),\n    defaultValues: {\n      name: \"\",\n      email: \"\",\n      reason: \"\",\n      message: \"\",\n    },\n  });\n\n  const contactMutation = useMutation({\n    mutationFn: (data: InsertContact) => apiRequest(\"POST\", \"/api/contact\", data),\n    onSuccess: () => {\n      toast({\n        title: \"Message sent successfully!\",\n        description: \"We'll get back to you within 24 hours.\",\n      });\n      form.reset();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to send message\",\n        description: error.message || \"Please try again later.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: InsertContact) => {\n    contactMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"min-h-screen py-16\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        {/* Header */}\n        <div className=\"text-center mb-16\">\n          <h1 className=\"text-4xl font-bold text-foreground mb-4\" data-testid=\"heading-contact\">\n            Get In <span className=\"text-primary\">Touch</span>\n          </h1>\n          <p className=\"text-lg text-muted-foreground\" data-testid=\"text-contact-subtitle\">\n            Have a recipe suggestion? Need cooking help? We'd love to hear from you!\n          </p>\n        </div>\n\n        <div className=\"grid lg:grid-cols-2 gap-16\">\n          {/* Contact Form */}\n          <div className=\"bg-card p-8 rounded-2xl shadow-lg\">\n            <h2 className=\"text-2xl font-bold text-foreground mb-6\" data-testid=\"heading-contact-form\">\n              Send us a message\n            </h2>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"name\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Name</FormLabel>\n                        <FormControl>\n                          <Input\n                            placeholder=\"Your name\"\n                            {...field}\n                            data-testid=\"input-name\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"email\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Email</FormLabel>\n                        <FormControl>\n                          <Input\n                            type=\"email\"\n                            placeholder=\"your@email.com\"\n                            {...field}\n                            data-testid=\"input-email\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n                <FormField\n                  control={form.control}\n                  name=\"reason\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Reason for Contact</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-reason\">\n                            <SelectValue placeholder=\"Select a reason\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"Recipe Suggestion\">Recipe Suggestion</SelectItem>\n                          <SelectItem value=\"Cooking Help\">Cooking Help</SelectItem>\n                          <SelectItem value=\"Website Feedback\">Website Feedback</SelectItem>\n                          <SelectItem value=\"Partnership\">Partnership</SelectItem>\n                          <SelectItem value=\"Other\">Other</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"message\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Message</FormLabel>\n                      <FormControl>\n                        <Textarea\n                          placeholder=\"Tell us how we can help you...\"\n                          rows={4}\n                          {...field}\n                          data-testid=\"textarea-message\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <Button \n                  type=\"submit\" \n                  className=\"w-full bg-primary text-primary-foreground hover:bg-green-700 transition-colors btn-scale py-3 rounded-xl font-semibold flex items-center justify-center space-x-2\"\n                  disabled={contactMutation.isPending}\n                  data-testid=\"button-send-message\"\n                >\n                  <span>{contactMutation.isPending ? \"Sending...\" : \"Send Message\"}</span>\n                  <Send className=\"w-5 h-5\" />\n                </Button>\n              </form>\n            </Form>\n          </div>\n\n          {/* Contact Info & FAQ */}\n          <div className=\"space-y-8\">\n            {/* Other ways to reach us */}\n            <div>\n              <h3 className=\"text-xl font-bold text-foreground mb-6\" data-testid=\"heading-other-ways\">\n                Other ways to reach us\n              </h3>\n              <div className=\"space-y-4\">\n                <div className=\"flex items-start space-x-3\" data-testid=\"contact-email\">\n                  <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center flex-shrink-0\">\n                    <Mail className=\"w-5 h-5 text-white\" />\n                  </div>\n                  <div>\n                    <h4 className=\"font-semibold text-foreground\">Email Us</h4>\n                    <p className=\"text-muted-foreground\">hello@sathikorecipe.com</p>\n                    <p className=\"text-sm text-muted-foreground\">We'll get back to you within 24 hours</p>\n                  </div>\n                </div>\n                <div className=\"flex items-start space-x-3\" data-testid=\"contact-discord\">\n                  <div className=\"w-10 h-10 bg-accent rounded-lg flex items-center justify-center flex-shrink-0\">\n                    <MessageCircle className=\"w-5 h-5 text-white\" />\n                  </div>\n                  <div>\n                    <h4 className=\"font-semibold text-foreground\">Join Our Community</h4>\n                    <p className=\"text-muted-foreground\">Discord Server</p>\n                    <p className=\"text-sm text-muted-foreground\">Chat with other students and share recipes</p>\n                  </div>\n                </div>\n                <div className=\"flex items-start space-x-3\" data-testid=\"contact-instagram\">\n                  <div className=\"w-10 h-10 bg-green-600 rounded-lg flex items-center justify-center flex-shrink-0\">\n                    <Instagram className=\"w-5 h-5 text-white\" />\n                  </div>\n                  <div>\n                    <h4 className=\"font-semibold text-foreground\">Follow Us</h4>\n                    <p className=\"text-muted-foreground\">@sathikorecipe</p>\n                    <p className=\"text-sm text-muted-foreground\">Daily recipe inspiration and cooking tips</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* Quick FAQ */}\n            <div>\n              <h3 className=\"text-xl font-bold text-foreground mb-6\" data-testid=\"heading-faq\">\n                Quick FAQ\n              </h3>\n              <div className=\"space-y-4\" data-testid=\"faq-section\">\n                <div>\n                  <h4 className=\"font-semibold text-foreground mb-1\">Can I submit my own recipes?</h4>\n                  <p className=\"text-muted-foreground text-sm\">Absolutely! We love featuring student-created recipes.</p>\n                </div>\n                <div>\n                  <h4 className=\"font-semibold text-foreground mb-1\">Do you offer cooking classes?</h4>\n                  <p className=\"text-muted-foreground text-sm\">We're planning virtual cooking classes. Stay tuned!</p>\n                </div>\n                <div>\n                  <h4 className=\"font-semibold text-foreground mb-1\">Is the app free to use?</h4>\n                  <p className=\"text-muted-foreground text-sm\">Yes! All our basic features are completely free.</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":9990},"client/src/pages/home.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { RecipeCard } from \"@/components/recipe-card\";\nimport { Search, Leaf, Clock, DollarSign, TrendingUp, Play } from \"lucide-react\";\nimport type { Recipe } from \"@shared/schema\";\n\nexport default function Home() {\n  const [, setLocation] = useLocation();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  const { data: trendingRecipes, isLoading } = useQuery<Recipe[]>({\n    queryKey: [\"/api/recipes/trending\"],\n  });\n\n  const handleSearch = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (searchQuery.trim()) {\n      setLocation(`/recipes?search=${encodeURIComponent(searchQuery.trim())}`);\n    } else {\n      setLocation(\"/recipes\");\n    }\n  };\n\n  const handleFilterClick = (category: string) => {\n    setLocation(`/recipes?category=${encodeURIComponent(category)}`);\n  };\n\n  return (\n    <div className=\"min-h-screen\">\n      {/* Hero Section */}\n      <div className=\"hero-gradient relative overflow-hidden\">\n        {/* Floating Food Elements Background */}\n        <div className=\"absolute inset-0 food-background\">\n          {/* Spice Particles */}\n          <div className=\"spice-particle spice-1\">🌿</div>\n          <div className=\"spice-particle spice-2\">🧄</div>\n          <div className=\"spice-particle spice-3\">🌶️</div>\n          <div className=\"spice-particle spice-4\">🧅</div>\n          <div className=\"spice-particle spice-5\">🥬</div>\n          <div className=\"spice-particle spice-6\">🥕</div>\n          <div className=\"spice-particle spice-7\">🍅</div>\n          <div className=\"spice-particle spice-8\">🫑</div>\n          \n          {/* Cooking Utensils */}\n          <div className=\"utensil-float utensil-1\">🥄</div>\n          <div className=\"utensil-float utensil-2\">🍴</div>\n          <div className=\"utensil-float utensil-3\">🔪</div>\n          \n          {/* Rice and Grains */}\n          <div className=\"grain-float grain-1\">🌾</div>\n          <div className=\"grain-float grain-2\">🍚</div>\n          <div className=\"grain-float grain-3\">🌿</div>\n          \n          {/* Traditional Elements */}\n          <div className=\"traditional-element element-1\">🥣</div>\n          <div className=\"traditional-element element-2\">🫖</div>\n          <div className=\"traditional-element element-3\">🍵</div>\n        </div>\n        \n        <div className=\"absolute inset-0\">\n          <div className=\"absolute top-20 left-10 w-32 h-32 bg-green-400 bg-opacity-15 rounded-full\"></div>\n          <div className=\"absolute top-40 right-20 w-24 h-24 bg-green-300 bg-opacity-10 rounded-full\"></div>\n          <div className=\"absolute bottom-20 left-1/4 w-40 h-40 bg-green-500 bg-opacity-12 rounded-full\"></div>\n          <div className=\"absolute bottom-40 right-10 w-28 h-28 bg-green-400 bg-opacity-8 rounded-full\"></div>\n        </div>\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-20 lg:py-32 relative hero-content\">\n          <div className=\"text-center\">\n            <h1 className=\"text-4xl sm:text-5xl lg:text-6xl font-bold text-white mb-6 hero-title\">\n              Simple Recipes for\n              <span className=\"text-accent block hero-subtitle\" data-testid=\"text-hero-subtitle\">Students</span>\n            </h1>\n            <p className=\"text-xl text-green-100 mb-8 max-w-2xl mx-auto hero-description\" data-testid=\"text-hero-description\">\n              Affordable, healthy, and easy-to-make meals perfect for international students and cooking beginners.\n            </p>\n\n            {/* Search Bar */}\n            <form onSubmit={handleSearch} className=\"max-w-xl mx-auto mb-8 hero-search\">\n              <div className=\"relative search-container\">\n                <Input\n                  type=\"text\"\n                  placeholder=\"Search recipes...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"w-full px-4 py-3 pl-12 rounded-xl bg-white text-gray-900 shadow-lg focus:outline-none focus:ring-2 focus:ring-accent search-input\"\n                  data-testid=\"input-search-recipes\"\n                />\n                <Search className=\"absolute left-4 top-3.5 w-5 h-5 text-gray-400 search-icon\" />\n                <Button\n                  type=\"submit\"\n                  className=\"absolute right-2 top-2 bg-accent text-white hover:bg-orange-600 transition-colors btn-scale\"\n                  data-testid=\"button-search\"\n                >\n                  Search\n                </Button>\n              </div>\n            </form>\n\n            {/* Quick Filters */}\n            <div className=\"flex flex-wrap justify-center gap-3 mb-8 hero-filters\">\n              <Button\n                variant=\"ghost\"\n                className=\"filter-pill filter-pill-1 bg-white bg-opacity-20 text-white hover:bg-opacity-30\"\n                onClick={() => handleFilterClick(\"Vegetarian\")}\n                data-testid=\"filter-vegetarian\"\n              >\n                <Leaf className=\"w-4 h-4 mr-2\" />\n                Vegetarian\n              </Button>\n              <Button\n                variant=\"ghost\"\n                className=\"filter-pill filter-pill-2 bg-white bg-opacity-20 text-white hover:bg-opacity-30\"\n                onClick={() => handleFilterClick(\"Quick Meals\")}\n                data-testid=\"filter-quick-meals\"\n              >\n                <Clock className=\"w-4 h-4 mr-2\" />\n                Quick Meals\n              </Button>\n              <Button\n                variant=\"ghost\"\n                className=\"filter-pill filter-pill-3 bg-white bg-opacity-20 text-white hover:bg-opacity-30\"\n                onClick={() => handleFilterClick(\"Budget\")}\n                data-testid=\"filter-budget\"\n              >\n                <DollarSign className=\"w-4 h-4 mr-2\" />\n                Budget Friendly\n              </Button>\n              <Button\n                variant=\"ghost\"\n                className=\"filter-pill filter-pill-4 bg-white bg-opacity-20 text-white hover:bg-opacity-30\"\n                onClick={() => handleFilterClick(\"Trending\")}\n                data-testid=\"filter-trending\"\n              >\n                <TrendingUp className=\"w-4 h-4 mr-2\" />\n                Trending\n              </Button>\n            </div>\n\n            {/* CTA Buttons */}\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center hero-cta\">\n              <Link href=\"/recipes\">\n                <Button\n                  className=\"bg-accent text-white hover:bg-orange-600 transition-all duration-300 btn-scale px-8 py-3 text-lg\"\n                  data-testid=\"button-explore-recipes\"\n                >\n                  Explore Recipes\n                </Button>\n              </Link>\n              <Button\n                variant=\"ghost\"\n                className=\"bg-white bg-opacity-20 text-white hover:bg-opacity-30 transition-all duration-300 btn-scale px-8 py-3 text-lg\"\n                data-testid=\"button-watch-demo\"\n              >\n                <Play className=\"w-5 h-5 mr-2\" />\n                Watch Demo\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Trending Recipes Section */}\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16\">\n        <div className=\"text-center mb-12\">\n          <h2 className=\"text-3xl sm:text-4xl font-bold text-foreground mb-4\" data-testid=\"heading-trending-recipes\">\n            Trending Recipes\n          </h2>\n          <p className=\"text-lg text-muted-foreground\" data-testid=\"text-trending-description\">\n            Popular dishes our students love\n          </p>\n        </div>\n\n        {isLoading ? (\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n            {Array.from({ length: 4 }).map((_, i) => (\n              <div key={i} className=\"bg-card rounded-xl shadow-lg overflow-hidden animate-pulse\">\n                <div className=\"w-full h-48 bg-gray-300 dark:bg-gray-700\"></div>\n                <div className=\"p-4 space-y-3\">\n                  <div className=\"h-4 bg-gray-300 dark:bg-gray-700 rounded\"></div>\n                  <div className=\"h-6 bg-gray-300 dark:bg-gray-700 rounded\"></div>\n                  <div className=\"h-4 bg-gray-300 dark:bg-gray-700 rounded\"></div>\n                  <div className=\"h-10 bg-gray-300 dark:bg-gray-700 rounded\"></div>\n                </div>\n              </div>\n            ))}\n          </div>\n        ) : trendingRecipes && trendingRecipes.length > 0 ? (\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\" data-testid=\"grid-trending-recipes\">\n            {trendingRecipes.map((recipe) => (\n              <RecipeCard key={recipe.id} recipe={recipe} />\n            ))}\n          </div>\n        ) : (\n          <div className=\"text-center py-12\">\n            <p className=\"text-muted-foreground text-lg\" data-testid=\"text-no-trending-recipes\">\n              No trending recipes available at the moment.\n            </p>\n          </div>\n        )}\n\n        <div className=\"text-center mt-12\">\n          <Link href=\"/recipes\">\n            <Button\n              variant=\"secondary\"\n              className=\"px-8 py-3 rounded-xl font-semibold hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors btn-scale\"\n              data-testid=\"button-view-all-recipes\"\n            >\n              View All Recipes\n            </Button>\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":9665},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/recipe-detail.tsx":{"content":"import { useState } from \"react\";\nimport { useRoute, Link } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { \n  ArrowLeft, \n  Clock, \n  Users, \n  DollarSign, \n  BarChart, \n  Star, \n  Copy, \n  ChefHat\n} from \"lucide-react\";\nimport type { Recipe } from \"@shared/schema\";\n\nexport default function RecipeDetail() {\n  const [, params] = useRoute(\"/recipe/:id\");\n  const [checkedIngredients, setCheckedIngredients] = useState<Record<number, boolean>>({});\n\n  const { data: recipe, isLoading, error } = useQuery<Recipe>({\n    queryKey: [`/api/recipes/${params?.id}`],\n    enabled: !!params?.id,\n  });\n\n  const renderStars = (rating: number) => {\n    const stars = [];\n    const fullStars = Math.floor(rating);\n    \n    for (let i = 0; i < 5; i++) {\n      stars.push(\n        <Star\n          key={i}\n          className={`w-5 h-5 ${\n            i < fullStars\n              ? \"text-yellow-star fill-current\"\n              : \"text-gray-300 dark:text-gray-600\"\n          }`}\n        />\n      );\n    }\n    \n    return stars;\n  };\n\n  const handleIngredientCheck = (index: number, checked: boolean) => {\n    setCheckedIngredients(prev => ({\n      ...prev,\n      [index]: checked\n    }));\n  };\n\n  const copyIngredients = async () => {\n    if (!recipe || !recipe.ingredients) return;\n    \n    const ingredientsList = recipe.ingredients.join('\\n');\n    try {\n      await navigator.clipboard.writeText(ingredientsList);\n      // Could show a toast notification here\n    } catch (err) {\n      console.error('Failed to copy ingredients:', err);\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen py-16\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"animate-pulse\">\n            <div className=\"h-6 bg-gray-300 dark:bg-gray-700 rounded w-32 mb-8\"></div>\n            <div className=\"grid lg:grid-cols-2 gap-8 mb-12\">\n              <div className=\"h-80 bg-gray-300 dark:bg-gray-700 rounded-xl\"></div>\n              <div className=\"space-y-6\">\n                <div className=\"h-8 bg-gray-300 dark:bg-gray-700 rounded\"></div>\n                <div className=\"h-12 bg-gray-300 dark:bg-gray-700 rounded\"></div>\n                <div className=\"h-20 bg-gray-300 dark:bg-gray-700 rounded\"></div>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  {Array.from({ length: 4 }).map((_, i) => (\n                    <div key={i} className=\"h-20 bg-gray-300 dark:bg-gray-700 rounded-lg\"></div>\n                  ))}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error || !recipe) {\n    return (\n      <div className=\"min-h-screen py-16\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center\">\n            <h1 className=\"text-2xl font-bold text-foreground mb-4\" data-testid=\"heading-recipe-not-found\">\n              Recipe Not Found\n            </h1>\n            <p className=\"text-muted-foreground mb-8\" data-testid=\"text-recipe-error\">\n              The recipe you're looking for doesn't exist or has been removed.\n            </p>\n            <Link href=\"/recipes\">\n              <Button data-testid=\"button-back-to-recipes\">\n                Back to Recipes\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen py-16\">\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n        {/* Back Button */}\n        <Link href=\"/recipes\">\n          <Button \n            variant=\"ghost\" \n            className=\"flex items-center space-x-2 text-muted-foreground hover:text-foreground mb-8 transition-colors\"\n            data-testid=\"button-back-to-recipes\"\n          >\n            <ArrowLeft className=\"w-5 h-5\" />\n            <span>Back to Recipes</span>\n          </Button>\n        </Link>\n\n        {/* Recipe Header */}\n        <div className=\"grid lg:grid-cols-2 gap-8 mb-12\">\n          <div>\n            <img\n              src={recipe.image}\n              alt={recipe.title}\n              className=\"w-full h-80 object-cover rounded-xl shadow-lg\"\n              data-testid=\"img-recipe-main\"\n              onError={(e) => {\n                (e.target as HTMLImageElement).src = \"https://images.unsplash.com/photo-1546069901-ba9599a7e63c?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&h=400\";\n              }}\n            />\n          </div>\n          <div className=\"space-y-6\">\n            <div>\n              <div className=\"flex items-center space-x-2 mb-2\">\n                <Badge\n                  variant=\"secondary\"\n                  className=\"bg-green-100 text-primary font-medium dark:bg-green-900 dark:text-green-300\"\n                  data-testid=\"badge-recipe-category\"\n                >\n                  {recipe.category === \"Vegetarian\" ? \"Veg\" : recipe.category}\n                </Badge>\n                <div className=\"flex items-center space-x-1\" data-testid=\"rating-stars\">\n                  {renderStars(recipe.rating)}\n                  <span className=\"text-sm text-muted-foreground ml-1\">\n                    ({recipe.rating ? recipe.rating.toFixed(1) : '0.0'})\n                  </span>\n                </div>\n              </div>\n              <h1 className=\"text-4xl font-bold text-foreground mb-3\" data-testid=\"title-recipe\">\n                {recipe.title}\n              </h1>\n              <p className=\"text-lg text-muted-foreground mb-6\" data-testid=\"description-recipe\">\n                {recipe.description}\n              </p>\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"bg-muted p-4 rounded-lg\" data-testid=\"info-cook-time\">\n                <div className=\"flex items-center space-x-2 mb-1\">\n                  <Clock className=\"w-5 h-5 text-accent\" />\n                  <span className=\"font-semibold\">Cook Time</span>\n                </div>\n                <span className=\"text-2xl font-bold text-foreground\">{recipe.cookTime} min</span>\n              </div>\n              <div className=\"bg-muted p-4 rounded-lg\" data-testid=\"info-servings\">\n                <div className=\"flex items-center space-x-2 mb-1\">\n                  <Users className=\"w-5 h-5 text-accent\" />\n                  <span className=\"font-semibold\">Servings</span>\n                </div>\n                <span className=\"text-2xl font-bold text-foreground\">{recipe.servings}</span>\n              </div>\n              <div className=\"bg-muted p-4 rounded-lg\" data-testid=\"info-cost\">\n                <div className=\"flex items-center space-x-2 mb-1\">\n                  <DollarSign className=\"w-5 h-5 text-accent\" />\n                  <span className=\"font-semibold\">Cost/Serve</span>\n                </div>\n                <span className=\"text-2xl font-bold text-foreground\">${recipe.cost ? recipe.cost.toFixed(2) : '0.00'}</span>\n              </div>\n              <div className=\"bg-muted p-4 rounded-lg\" data-testid=\"info-difficulty\">\n                <div className=\"flex items-center space-x-2 mb-1\">\n                  <BarChart className=\"w-5 h-5 text-accent\" />\n                  <span className=\"font-semibold\">Difficulty</span>\n                </div>\n                <span className=\"text-2xl font-bold text-foreground\">{recipe.difficulty}</span>\n              </div>\n            </div>\n\n            <Button \n              className=\"w-full bg-primary text-primary-foreground hover:bg-green-700 transition-colors btn-scale py-3 rounded-xl font-semibold\"\n              data-testid=\"button-cooking-mode\"\n            >\n              <ChefHat className=\"w-5 h-5 mr-2\" />\n              Start Cooking Mode\n            </Button>\n          </div>\n        </div>\n\n        {/* Recipe Content */}\n        <div className=\"grid lg:grid-cols-3 gap-8\">\n          {/* Ingredients */}\n          <div className=\"lg:col-span-1\">\n            <div className=\"bg-card p-6 rounded-xl shadow-lg sticky top-24\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <h2 className=\"text-2xl font-bold text-foreground\" data-testid=\"heading-ingredients\">\n                  Ingredients\n                </h2>\n                <Button\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  onClick={copyIngredients}\n                  className=\"text-accent hover:text-orange-600 transition-colors\"\n                  title=\"Copy to clipboard\"\n                  data-testid=\"button-copy-ingredients\"\n                >\n                  <Copy className=\"w-5 h-5\" />\n                </Button>\n              </div>\n              <ul className=\"space-y-3\" data-testid=\"list-ingredients\">\n                {(recipe.ingredients || []).map((ingredient, index) => (\n                  <li key={index} className=\"flex items-center space-x-3\">\n                    <Checkbox\n                      id={`ingredient-${index}`}\n                      checked={checkedIngredients[index] || false}\n                      onCheckedChange={(checked) => handleIngredientCheck(index, checked as boolean)}\n                      data-testid={`checkbox-ingredient-${index}`}\n                    />\n                    <label\n                      htmlFor={`ingredient-${index}`}\n                      className={`cursor-pointer ${\n                        checkedIngredients[index] ? \"line-through opacity-60\" : \"\"\n                      }`}\n                    >\n                      {String(ingredient)}\n                    </label>\n                  </li>\n                ))}\n              </ul>\n\n              {/* Nutrition Facts */}\n              {recipe.nutritionFacts && (\n                <div className=\"mt-8 pt-6 border-t border-border\">\n                  <h3 className=\"font-semibold text-lg mb-3\" data-testid=\"heading-nutrition\">\n                    Nutrition Facts\n                  </h3>\n                  <div className=\"space-y-2 text-sm\" data-testid=\"nutrition-facts\">\n                    <div className=\"flex justify-between\">\n                      <span>Calories</span>\n                      <span className=\"font-medium\">{recipe.nutritionFacts.calories}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Protein</span>\n                      <span className=\"font-medium\">{recipe.nutritionFacts.protein}g</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Carbs</span>\n                      <span className=\"font-medium\">{recipe.nutritionFacts.carbs}g</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Fat</span>\n                      <span className=\"font-medium\">{recipe.nutritionFacts.fat}g</span>\n                    </div>\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Instructions */}\n          <div className=\"lg:col-span-2\">\n            <h2 className=\"text-2xl font-bold text-foreground mb-6\" data-testid=\"heading-instructions\">\n              Instructions\n            </h2>\n            <div className=\"space-y-6\" data-testid=\"list-instructions\">\n              {(recipe.instructions || []).map((instruction, index) => (\n                <div key={index} className=\"flex space-x-4\">\n                  <div className=\"step-counter w-8 h-8 rounded-full text-white flex items-center justify-center font-semibold text-sm flex-shrink-0\">\n                    {index + 1}\n                  </div>\n                  <div>\n                    <p className=\"text-lg text-foreground cooking-step\">{String(instruction)}</p>\n                  </div>\n                </div>\n              ))}\n            </div>\n\n            {/* Cooking Tips */}\n            {recipe.cookingTips && recipe.cookingTips.length > 0 && (\n              <div className=\"mt-12 bg-muted p-6 rounded-xl\">\n                <h3 className=\"text-xl font-bold text-foreground mb-4\" data-testid=\"heading-cooking-tips\">\n                  👨‍🍳 Cooking Tips\n                </h3>\n                <ul className=\"space-y-2 text-muted-foreground\" data-testid=\"list-cooking-tips\">\n                  {recipe.cookingTips.map((tip, index) => (\n                    <li key={index}>• {String(tip)}</li>\n                  ))}\n                </ul>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":12624},"client/src/pages/recipes.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { RecipeCard } from \"@/components/recipe-card\";\nimport { Search, Leaf, Fish, Clock, DollarSign } from \"lucide-react\";\nimport type { Recipe } from \"@shared/schema\";\n\nexport default function Recipes() {\n  const [activeFilter, setActiveFilter] = useState(\"All Recipes\");\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [localSearch, setLocalSearch] = useState(\"\");\n\n  // Get URL params\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const category = urlParams.get(\"category\");\n    const search = urlParams.get(\"search\");\n    const quick = urlParams.get(\"quick\");\n    const budget = urlParams.get(\"budget\");\n    \n    if (category) {\n      setActiveFilter(category);\n    } else if (quick === \"true\") {\n      setActiveFilter(\"Quick Meals\");\n    } else if (budget === \"true\") {\n      setActiveFilter(\"Budget\");\n    }\n    \n    if (search) {\n      setSearchQuery(search);\n      setLocalSearch(search);\n    }\n  }, []);\n\n  const { data: recipes, isLoading } = useQuery<Recipe[]>({\n    queryKey: [\"/api/recipes\", { category: activeFilter !== \"All Recipes\" ? activeFilter : undefined, search: searchQuery }],\n  });\n\n  const filters = [\n    { name: \"All Recipes\", icon: null, description: \"View all authentic Nepali recipes\" },\n    { name: \"Vegetarian\", icon: Leaf, description: \"Plant-based traditional dishes\" },\n    { name: \"Non-Veg\", icon: Fish, description: \"Meat and poultry specialties\" },\n    { name: \"Quick Meals\", icon: Clock, description: \"Ready in 30 minutes or less\" },\n    { name: \"Budget\", icon: DollarSign, description: \"Affordable student-friendly meals\" },\n  ];\n\n  const handleFilterClick = (filterName: string) => {\n    setActiveFilter(filterName);\n    setSearchQuery(\"\");\n    setLocalSearch(\"\");\n    \n    // Update URL\n    const newUrl = filterName === \"All Recipes\" \n      ? \"/recipes\" \n      : `/recipes?category=${encodeURIComponent(filterName)}`;\n    window.history.pushState({}, \"\", newUrl);\n  };\n\n  const handleSearch = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (localSearch.trim()) {\n      setSearchQuery(localSearch.trim());\n      setActiveFilter(\"All Recipes\");\n      window.history.pushState({}, \"\", `/recipes?search=${encodeURIComponent(localSearch.trim())}`);\n    } else {\n      setSearchQuery(\"\");\n      window.history.pushState({}, \"\", \"/recipes\");\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen py-16\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        {/* Header */}\n        <div className=\"text-center mb-12 animate-fade-in\">\n          <h1 className=\"text-4xl md:text-5xl font-bold text-foreground mb-4\" data-testid=\"heading-recipes\">\n            Authentic Nepali Recipes\n          </h1>\n          <p className=\"text-lg text-muted-foreground max-w-2xl mx-auto\" data-testid=\"text-recipes-description\">\n            Discover traditional Nepali cuisine with step-by-step guides perfect for international students and cooking beginners\n          </p>\n          {recipes && recipes.length > 0 && (\n            <div className=\"mt-6 text-primary font-medium\">\n              <span className=\"bg-primary/10 px-4 py-2 rounded-full\">\n                {recipes.length} Traditional Recipes Available\n              </span>\n            </div>\n          )}\n        </div>\n\n        {/* Search Bar */}\n        <form onSubmit={handleSearch} className=\"max-w-lg mx-auto mb-8\">\n          <div className=\"relative\">\n            <Input\n              type=\"text\"\n              placeholder=\"Search recipes...\"\n              value={localSearch}\n              onChange={(e) => setLocalSearch(e.target.value)}\n              className=\"w-full px-4 py-3 pl-12 rounded-xl\"\n              data-testid=\"input-search-recipes\"\n            />\n            <Search className=\"absolute left-4 top-3.5 w-5 h-5 text-muted-foreground\" />\n            <Button\n              type=\"submit\"\n              className=\"absolute right-2 top-2 bg-accent text-white hover:bg-orange-600 transition-colors btn-scale\"\n              data-testid=\"button-search\"\n            >\n              Search\n            </Button>\n          </div>\n        </form>\n\n        {/* Category Filters */}\n        <div className=\"mb-12 animate-slide-up\">\n          <div className=\"text-center mb-6\">\n            <h2 className=\"text-2xl font-semibold text-foreground mb-2\">Browse by Category</h2>\n            <p className=\"text-muted-foreground\">Find recipes that match your preferences and cooking style</p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4 max-w-6xl mx-auto\">\n            {filters.map((filter) => {\n              const Icon = filter.icon;\n              const isActive = activeFilter === filter.name;\n              return (\n                <div\n                  key={filter.name}\n                  className={`group cursor-pointer transition-all duration-300 hover:scale-105 ${\n                    isActive ? \"transform scale-105\" : \"\"\n                  }`}\n                  onClick={() => handleFilterClick(filter.name)}\n                  data-testid={`filter-${filter.name.toLowerCase().replace(\" \", \"-\")}`}\n                >\n                  <div\n                    className={`p-6 rounded-2xl border-2 transition-all duration-300 text-center ${\n                      isActive\n                        ? \"border-primary bg-primary/10 shadow-lg\"\n                        : \"border-border bg-card hover:border-primary/50 hover:bg-primary/5\"\n                    }`}\n                  >\n                    {Icon ? (\n                      <div className={`w-12 h-12 mx-auto mb-3 rounded-full flex items-center justify-center ${\n                        isActive ? \"bg-primary text-white\" : \"bg-muted text-muted-foreground group-hover:bg-primary/20 group-hover:text-primary\"\n                      }`}>\n                        <Icon className=\"w-6 h-6\" />\n                      </div>\n                    ) : (\n                      <div className={`w-12 h-12 mx-auto mb-3 rounded-full flex items-center justify-center bg-gradient-to-br from-primary to-accent ${\n                        isActive ? \"shadow-lg\" : \"opacity-80 group-hover:opacity-100\"\n                      }`}>\n                        <span className=\"text-white font-bold text-lg\">🍽️</span>\n                      </div>\n                    )}\n                    \n                    <h3 className={`font-semibold mb-2 transition-colors ${\n                      isActive ? \"text-primary\" : \"text-foreground group-hover:text-primary\"\n                    }`}>\n                      {filter.name}\n                    </h3>\n                    \n                    <p className={`text-sm transition-colors ${\n                      isActive ? \"text-primary/80\" : \"text-muted-foreground\"\n                    }`}>\n                      {filter.description}\n                    </p>\n                    \n                    {recipes && (\n                      <div className={`mt-3 text-xs font-medium ${\n                        isActive ? \"text-primary\" : \"text-muted-foreground\"\n                      }`}>\n                        {filter.name === \"All Recipes\" \n                          ? `${recipes.length} recipes`\n                          : filter.name === \"Quick Meals\"\n                            ? `${recipes.filter(r => r.cookTime <= 30).length} recipes`\n                            : filter.name === \"Budget\"\n                              ? `${recipes.filter(r => r.cost <= 3.50).length} recipes`\n                              : `${recipes.filter(r => r.category === filter.name).length} recipes`\n                        }\n                      </div>\n                    )}\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n\n        {/* Results Info */}\n        <div className=\"mb-8\">\n          {searchQuery ? (\n            <div className=\"text-center\">\n              <p className=\"text-lg text-muted-foreground\" data-testid=\"text-search-results\">\n                Search results for <span className=\"font-medium text-primary\">\"{searchQuery}\"</span>\n              </p>\n              {recipes && recipes.length > 0 && (\n                <p className=\"text-sm text-muted-foreground mt-1\">\n                  Found {recipes.length} recipe{recipes.length !== 1 ? 's' : ''} matching your search\n                </p>\n              )}\n            </div>\n          ) : activeFilter !== \"All Recipes\" ? (\n            <div className=\"text-center\">\n              <p className=\"text-lg text-foreground font-medium\">\n                {activeFilter} Recipes\n              </p>\n              {recipes && recipes.length > 0 && (\n                <p className=\"text-sm text-muted-foreground mt-1\">\n                  Showing {recipes.length} traditional {activeFilter.toLowerCase()} recipe{recipes.length !== 1 ? 's' : ''}\n                </p>\n              )}\n            </div>\n          ) : recipes && recipes.length > 0 && (\n            <div className=\"text-center\">\n              <p className=\"text-lg text-foreground font-medium\">\n                All Authentic Nepali Recipes\n              </p>\n              <p className=\"text-sm text-muted-foreground mt-1\">\n                Complete collection of {recipes.length} traditional recipes from Nepal\n              </p>\n            </div>\n          )}\n        </div>\n\n        {/* Recipe Grid */}\n        {isLoading ? (\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n            {Array.from({ length: 8 }).map((_, i) => (\n              <div key={i} className=\"bg-card rounded-xl shadow-lg overflow-hidden animate-pulse\">\n                <div className=\"w-full h-48 bg-gray-300 dark:bg-gray-700\"></div>\n                <div className=\"p-4 space-y-3\">\n                  <div className=\"h-4 bg-gray-300 dark:bg-gray-700 rounded\"></div>\n                  <div className=\"h-6 bg-gray-300 dark:bg-gray-700 rounded\"></div>\n                  <div className=\"h-4 bg-gray-300 dark:bg-gray-700 rounded\"></div>\n                  <div className=\"h-10 bg-gray-300 dark:bg-gray-700 rounded\"></div>\n                </div>\n              </div>\n            ))}\n          </div>\n        ) : recipes && recipes.length > 0 ? (\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\" data-testid=\"grid-recipes\">\n            {recipes.map((recipe) => (\n              <RecipeCard key={recipe.id} recipe={recipe} />\n            ))}\n          </div>\n        ) : (\n          <div className=\"text-center py-12\">\n            <p className=\"text-muted-foreground text-lg\" data-testid=\"text-no-recipes\">\n              {searchQuery \n                ? `No recipes found for \"${searchQuery}\"`\n                : `No recipes found in ${activeFilter}`\n              }\n            </p>\n            <Button\n              variant=\"outline\"\n              className=\"mt-4\"\n              onClick={() => {\n                setActiveFilter(\"All Recipes\");\n                setSearchQuery(\"\");\n                setLocalSearch(\"\");\n                window.history.pushState({}, \"\", \"/recipes\");\n              }}\n              data-testid=\"button-view-all\"\n            >\n              View All Recipes\n            </Button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":11484},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}